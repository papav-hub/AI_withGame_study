; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30133.0 

	TITLE	E:\Desktop\Raven\Raven1\Buckland_Chapter7 to 10_Raven\Debug\FuzzyOperators.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG48229 DB	'invalid argument', 00H
	ORG $+3
$SG48230 DB	'%s', 00H
	ORG $+1
$SG48231 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.29.30133\include\xmemory', 00H
$SG48232 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H
	DB	'1', 00H, '3', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H
	DB	00H
$SG48233 DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG48234 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AAE@QBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Orphan_all_unlocked@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_unlocked
PUBLIC	?_Orphan_all_locked@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_locked
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Orphan_me_v2@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Orphan_me_v2
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Adopt_unlocked@_Iterator_base12@std@@AAEXPAU_Container_proxy@2@@Z ; std::_Iterator_base12::_Adopt_unlocked
PUBLIC	?_Adopt_locked@_Iterator_base12@std@@AAEXPAU_Container_proxy@2@@Z ; std::_Iterator_base12::_Adopt_locked
PUBLIC	?_Orphan_me_unlocked@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked
PUBLIC	?_Orphan_me_locked@_Iterator_base12@std@@AAEXXZ	; std::_Iterator_base12::_Orphan_me_locked
PUBLIC	??1FuzzyTerm@@UAE@XZ				; FuzzyTerm::~FuzzyTerm
PUBLIC	??0FuzzyTerm@@QAE@XZ				; FuzzyTerm::FuzzyTerm
PUBLIC	??_GFuzzyTerm@@UAEPAXI@Z			; FuzzyTerm::`scalar deleting destructor'
PUBLIC	??0?$allocator@PAVFuzzyTerm@@@std@@QAE@XZ	; std::allocator<FuzzyTerm *>::allocator<FuzzyTerm *>
PUBLIC	?deallocate@?$allocator@PAVFuzzyTerm@@@std@@QAEXQAPAVFuzzyTerm@@I@Z ; std::allocator<FuzzyTerm *>::deallocate
PUBLIC	?allocate@?$allocator@PAVFuzzyTerm@@@std@@QAEPAPAVFuzzyTerm@@I@Z ; std::allocator<FuzzyTerm *>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAIABV?$allocator@PAVFuzzyTerm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<FuzzyTerm *> >::max_size
PUBLIC	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
PUBLIC	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
PUBLIC	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back
PUBLIC	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
PUBLIC	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
PUBLIC	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
PUBLIC	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
PUBLIC	?max_size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::max_size
PUBLIC	?capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::capacity
PUBLIC	?_Umove@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEPAPAVFuzzyTerm@@PAPAV3@00@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove
PUBLIC	?_Umove_if_noexcept1@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@00U?$integral_constant@_N$00@2@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@00@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@0@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEII@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXQAPAVFuzzyTerm@@II@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Change_array
PUBLIC	?_Tidy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Tidy
PUBLIC	?_Xlength@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@CAXXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Orphan_range
PUBLIC	?_Getal@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Getal
PUBLIC	?_Getal@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEABV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<FuzzyTerm *> >::_Vector_val<std::_Simple_types<FuzzyTerm *> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first
PUBLIC	??1FzAND@@UAE@XZ				; FzAND::~FzAND
PUBLIC	??0FzAND@@QAE@ABV0@@Z				; FzAND::FzAND
PUBLIC	??0FzAND@@QAE@AAVFuzzyTerm@@0@Z			; FzAND::FzAND
PUBLIC	??0FzAND@@QAE@AAVFuzzyTerm@@00@Z		; FzAND::FzAND
PUBLIC	??0FzAND@@QAE@AAVFuzzyTerm@@000@Z		; FzAND::FzAND
PUBLIC	?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ		; FzAND::Clone
PUBLIC	?GetDOM@FzAND@@UBENXZ				; FzAND::GetDOM
PUBLIC	?ClearDOM@FzAND@@UAEXXZ				; FzAND::ClearDOM
PUBLIC	?ORwithDOM@FzAND@@UAEXN@Z			; FzAND::ORwithDOM
PUBLIC	??_GFzAND@@UAEPAXI@Z				; FzAND::`scalar deleting destructor'
PUBLIC	??1FzOR@@UAE@XZ					; FzOR::~FzOR
PUBLIC	??0FzOR@@QAE@ABV0@@Z				; FzOR::FzOR
PUBLIC	??0FzOR@@QAE@AAVFuzzyTerm@@0@Z			; FzOR::FzOR
PUBLIC	??0FzOR@@QAE@AAVFuzzyTerm@@00@Z			; FzOR::FzOR
PUBLIC	??0FzOR@@QAE@AAVFuzzyTerm@@000@Z		; FzOR::FzOR
PUBLIC	?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ		; FzOR::Clone
PUBLIC	?GetDOM@FzOR@@UBENXZ				; FzOR::GetDOM
PUBLIC	?ClearDOM@FzOR@@UAEXXZ				; FzOR::ClearDOM
PUBLIC	?ORwithDOM@FzOR@@UAEXN@Z			; FzOR::ORwithDOM
PUBLIC	??_GFzOR@@UAEPAXI@Z				; FzOR::`scalar deleting destructor'
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
PUBLIC	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator==
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Compat
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
PUBLIC	??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
PUBLIC	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
PUBLIC	??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@ABV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > const >
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
PUBLIC	??$move@AAPAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::move<FuzzyTerm * &>
PUBLIC	??$emplace_back@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?A_T$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::emplace_back<FuzzyTerm *>
PUBLIC	??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::forward<FuzzyTerm *>
PUBLIC	??$_Emplace_back_with_unused_capacity@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAE?A_T$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Emplace_back_with_unused_capacity<FuzzyTerm *>
PUBLIC	??$_Unfancy@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z ; std::_Unfancy<FuzzyTerm *>
PUBLIC	??$construct@PAVFuzzyTerm@@PAV1@@?$_Default_allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAXAAV?$allocator@PAVFuzzyTerm@@@1@QAPAVFuzzyTerm@@$$QAPAV3@@Z ; std::_Default_allocator_traits<std::allocator<FuzzyTerm *> >::construct<FuzzyTerm *,FuzzyTerm *>
PUBLIC	??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Emplace_reallocate<FuzzyTerm *>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0PAVFuzzyTerm@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><FuzzyTerm *>
PUBLIC	??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1><>
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$min@I@std@@YAABIABI0@Z			; std::min<unsigned int>
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Destroy_range@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAXPAPAVFuzzyTerm@@QAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z ; std::_Destroy_range<std::allocator<FuzzyTerm *> >
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Voidify_iter@PAPAVFuzzyTerm@@@std@@YAPAXPAPAVFuzzyTerm@@@Z ; std::_Voidify_iter<FuzzyTerm * *>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
PUBLIC	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Uninitialized_move@PAPAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@0PAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z ; std::_Uninitialized_move<FuzzyTerm * *,std::allocator<FuzzyTerm *> >
PUBLIC	??$_Get_size_of_n@$03@std@@YAII@Z		; std::_Get_size_of_n<4>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$_Get_unwrapped@ABQAPAVFuzzyTerm@@@std@@YA?A_TABQAPAVFuzzyTerm@@@Z ; std::_Get_unwrapped<FuzzyTerm * * const &>
PUBLIC	??$_Copy_memmove@PAPAVFuzzyTerm@@PAPAV1@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00@Z ; std::_Copy_memmove<FuzzyTerm * *,FuzzyTerm * *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@PAPAVFuzzyTerm@@AAV?$allocator@PAVFuzzyTerm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >::_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >::~_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@XZ ; std::_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >::_Release
PUBLIC	??$_Emplace_back@PAVFuzzyTerm@@@?$_Uninitialized_backout_al@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >::_Emplace_back<FuzzyTerm *>
PUBLIC	??$_To_address@PAPAVFuzzyTerm@@@std@@YA?A_PABQAPAVFuzzyTerm@@@Z ; std::_To_address<FuzzyTerm * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GI@MNEMJBML@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NA@MJBOBEJL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ ; `string'
PUBLIC	??_C@_1FG@EMKODCE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@ ; `string'
PUBLIC	??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ ; `string'
PUBLIC	??_7FuzzyTerm@@6B@				; FuzzyTerm::`vftable'
PUBLIC	??_7FzAND@@6B@					; FzAND::`vftable'
PUBLIC	??_7FzOR@@6B@					; FzOR::`vftable'
PUBLIC	??_C@_1GM@CCHCGJJ@?$AAE?$AA?3?$AA?2?$AAD?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAR?$AAa?$AAv?$AAe@ ; `string'
PUBLIC	??_C@_1FC@EJGEACIH@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAC?$AAl@ ; `string'
PUBLIC	??_C@_1FE@EKNHDPMB@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAO?$AAR@ ; `string'
PUBLIC	??_C@_0DC@KEKNBAEB@can?8t?5increment?5value?9initializ@ ; `string'
PUBLIC	??_C@_0GH@KMHDIFOI@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1MO@NOHEJINP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1OC@CGPGIJAB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ ; `string'
PUBLIC	??_C@_1GI@EDCILPL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ ; `string'
PUBLIC	??_C@_0CJ@OAAAAGPM@can?8t?5increment?5vector?5iterator@ ; `string'
PUBLIC	??_C@_1FG@LDPPKMGP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ ; `string'
PUBLIC	??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@ ; `string'
PUBLIC	??_C@_1OA@BIBNCNDA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ ; `string'
PUBLIC	??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ ; `string'
PUBLIC	??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@ ; `string'
PUBLIC	??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ ; `string'
PUBLIC	??_C@_0BO@CAOBBIOC@vector?5iterators?5incompatible@ ; `string'
PUBLIC	??_C@_1NK@PBOLGCJB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ ; `string'
PUBLIC	??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FuzzyTerm@@6B@				; FuzzyTerm::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFuzzyTerm@@@8				; FuzzyTerm `RTTI Type Descriptor'
PUBLIC	??_R3FuzzyTerm@@8				; FuzzyTerm::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FuzzyTerm@@8				; FuzzyTerm::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FuzzyTerm@@8			; FuzzyTerm::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FzAND@@6B@					; FzAND::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFzAND@@@8				; FzAND `RTTI Type Descriptor'
PUBLIC	??_R3FzAND@@8					; FzAND::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FzAND@@8					; FzAND::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FzAND@@8				; FzAND::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FzOR@@6B@					; FzOR::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFzOR@@@8				; FzOR `RTTI Type Descriptor'
PUBLIC	??_R3FzOR@@8					; FzOR::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FzOR@@8					; FzOR::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FzOR@@8				; FzOR::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3810000000000000
PUBLIC	__real@7fefffffffffffff
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter:PROC
EXTRN	_memmove:PROC
EXTRN	__CrtDbgReport:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	__wassert:PROC
EXTRN	??_EFuzzyTerm@@UAEPAXI@Z:PROC			; FuzzyTerm::`vector deleting destructor'
EXTRN	??_EFzAND@@UAEPAXI@Z:PROC			; FzAND::`vector deleting destructor'
EXTRN	??_EFzOR@@UAEPAXI@Z:PROC			; FzOR::`vector deleting destructor'
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@7fefffffffffffff
CONST	SEGMENT
__real@7fefffffffffffff DQ 07fefffffffffffffr	; 1.79769e+308
CONST	ENDS
;	COMDAT __real@3810000000000000
CONST	SEGMENT
__real@3810000000000000 DQ 03810000000000000r	; 1.17549e-38
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@FzOR@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FzOR@@8 DD FLAT:??_R0?AVFzOR@@@8		; FzOR::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FzOR@@8
rdata$r	ENDS
;	COMDAT ??_R2FzOR@@8
rdata$r	SEGMENT
??_R2FzOR@@8 DD	FLAT:??_R1A@?0A@EA@FzOR@@8		; FzOR::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FuzzyTerm@@8
rdata$r	ENDS
;	COMDAT ??_R3FzOR@@8
rdata$r	SEGMENT
??_R3FzOR@@8 DD	00H					; FzOR::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FzOR@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFzOR@@@8
data$rs	SEGMENT
??_R0?AVFzOR@@@8 DD FLAT:??_7type_info@@6B@		; FzOR `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFzOR@@', 00H
data$rs	ENDS
;	COMDAT ??_R4FzOR@@6B@
rdata$r	SEGMENT
??_R4FzOR@@6B@ DD 00H					; FzOR::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFzOR@@@8
	DD	FLAT:??_R3FzOR@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FzAND@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FzAND@@8 DD FLAT:??_R0?AVFzAND@@@8	; FzAND::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FzAND@@8
rdata$r	ENDS
;	COMDAT ??_R2FzAND@@8
rdata$r	SEGMENT
??_R2FzAND@@8 DD FLAT:??_R1A@?0A@EA@FzAND@@8		; FzAND::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FuzzyTerm@@8
rdata$r	ENDS
;	COMDAT ??_R3FzAND@@8
rdata$r	SEGMENT
??_R3FzAND@@8 DD 00H					; FzAND::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FzAND@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFzAND@@@8
data$rs	SEGMENT
??_R0?AVFzAND@@@8 DD FLAT:??_7type_info@@6B@		; FzAND `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFzAND@@', 00H
data$rs	ENDS
;	COMDAT ??_R4FzAND@@6B@
rdata$r	SEGMENT
??_R4FzAND@@6B@ DD 00H					; FzAND::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFzAND@@@8
	DD	FLAT:??_R3FzAND@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FuzzyTerm@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FuzzyTerm@@8 DD FLAT:??_R0?AVFuzzyTerm@@@8 ; FuzzyTerm::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FuzzyTerm@@8
rdata$r	ENDS
;	COMDAT ??_R2FuzzyTerm@@8
rdata$r	SEGMENT
??_R2FuzzyTerm@@8 DD FLAT:??_R1A@?0A@EA@FuzzyTerm@@8	; FuzzyTerm::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3FuzzyTerm@@8
rdata$r	SEGMENT
??_R3FuzzyTerm@@8 DD 00H				; FuzzyTerm::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2FuzzyTerm@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFuzzyTerm@@@8
data$rs	SEGMENT
??_R0?AVFuzzyTerm@@@8 DD FLAT:??_7type_info@@6B@	; FuzzyTerm `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFuzzyTerm@@', 00H
data$rs	ENDS
;	COMDAT ??_R4FuzzyTerm@@6B@
rdata$r	SEGMENT
??_R4FuzzyTerm@@6B@ DD 00H				; FuzzyTerm::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFuzzyTerm@@@8
	DD	FLAT:??_R3FuzzyTerm@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@
CONST	SEGMENT
??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i'
	DB	00H, 'b', 00H, 'l', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NK@PBOLGCJB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
CONST	SEGMENT
??_C@_1NK@PBOLGCJB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'F', 00H, 'u', 00H
	DB	'z', 00H, 'z', 00H, 'y', 00H, 'T', 00H, 'e', 00H, 'r', 00H, 'm'
	DB	00H, ' ', 00H, '*', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, '_', 00H, 'C', 00H, 'o', 00H, 'm'
	DB	00H, 'p', 00H, 'a', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CAOBBIOC@vector?5iterators?5incompatible@
CONST	SEGMENT
??_C@_0BO@CAOBBIOC@vector?5iterators?5incompatible@ DB 'vector iterators '
	DB	'incompatible', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
CONST	SEGMENT
??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r'
	DB	00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, ' ', 00H, 'v', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@
CONST	SEGMENT
??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@ DB 'can''t dere'
	DB	'ference out of range vector iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
CONST	SEGMENT
??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'v', 00H
	DB	'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1OA@BIBNCNDA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
CONST	SEGMENT
??_C@_1OA@BIBNCNDA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'F', 00H, 'u', 00H
	DB	'z', 00H, 'z', 00H, 'y', 00H, 'T', 00H, 'e', 00H, 'r', 00H, 'm'
	DB	00H, ' ', 00H, '*', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '*', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@
CONST	SEGMENT
??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@ DB 'can''t derefe'
	DB	'rence value-initialized vector iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@LDPPKMGP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
CONST	SEGMENT
??_C@_1FG@LDPPKMGP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'p', 00H, 'a', 00H, 's', 00H, 't', 00H, ' ', 00H, 'e', 00H, 'n'
	DB	00H, 'd', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@OAAAAGPM@can?8t?5increment?5vector?5iterator@
CONST	SEGMENT
??_C@_0CJ@OAAAAGPM@can?8t?5increment?5vector?5iterator@ DB 'can''t increm'
	DB	'ent vector iterator past end', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@EDCILPL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
CONST	SEGMENT
??_C@_1GI@EDCILPL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 't'
	DB	00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1OC@CGPGIJAB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
CONST	SEGMENT
??_C@_1OC@CGPGIJAB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'F', 00H, 'u', 00H
	DB	'z', 00H, 'z', 00H, 'y', 00H, 'T', 00H, 'e', 00H, 'r', 00H, 'm'
	DB	00H, ' ', 00H, '*', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '+', 00H
	DB	'+', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1MO@NOHEJINP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MO@NOHEJINP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H, '1', 00H
	DB	'3', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GH@KMHDIFOI@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GH@KMHDIFOI@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30133\include\vector', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@KEKNBAEB@can?8t?5increment?5value?9initializ@
CONST	SEGMENT
??_C@_0DC@KEKNBAEB@can?8t?5increment?5value?9initializ@ DB 'can''t increm'
	DB	'ent value-initialized vector iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@EKNHDPMB@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAO?$AAR@
CONST	SEGMENT
??_C@_1FE@EKNHDPMB@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAO?$AAR@ DB '0'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, '<', 00H
	DB	'F', 00H, 'z', 00H, 'O', 00H, 'R', 00H, ':', 00H, ':', 00H, 'O'
	DB	00H, 'R', 00H, 'w', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'D', 00H
	DB	'O', 00H, 'M', 00H, '>', 00H, ':', 00H, ' ', 00H, 'i', 00H, 'n'
	DB	00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@EJGEACIH@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAC?$AAl@
CONST	SEGMENT
??_C@_1FC@EJGEACIH@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAC?$AAl@ DB '0'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, '<', 00H
	DB	'F', 00H, 'z', 00H, 'O', 00H, 'R', 00H, ':', 00H, ':', 00H, 'C'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'D', 00H, 'O', 00H
	DB	'M', 00H, '>', 00H, ':', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@CCHCGJJ@?$AAE?$AA?3?$AA?2?$AAD?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAR?$AAa?$AAv?$AAe@
CONST	SEGMENT
??_C@_1GM@CCHCGJJ@?$AAE?$AA?3?$AA?2?$AAD?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAR?$AAa?$AAv?$AAe@ DB 'E'
	DB	00H, ':', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's', 00H, 'k', 00H
	DB	't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'R', 00H, 'a', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, '\', 00H, 'R', 00H, 'a', 00H, 'v', 00H
	DB	'e', 00H, 'n', 00H, '1', 00H, '\', 00H, 'C', 00H, 'o', 00H, 'm'
	DB	00H, 'm', 00H, 'o', 00H, 'n', 00H, '\', 00H, 'f', 00H, 'u', 00H
	DB	'z', 00H, 'z', 00H, 'y', 00H, '\', 00H, 'F', 00H, 'u', 00H, 'z'
	DB	00H, 'z', 00H, 'y', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 's', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_7FzOR@@6B@
CONST	SEGMENT
??_7FzOR@@6B@ DD FLAT:??_R4FzOR@@6B@			; FzOR::`vftable'
	DD	FLAT:??_EFzOR@@UAEPAXI@Z
	DD	FLAT:?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ
	DD	FLAT:?GetDOM@FzOR@@UBENXZ
	DD	FLAT:?ClearDOM@FzOR@@UAEXXZ
	DD	FLAT:?ORwithDOM@FzOR@@UAEXN@Z
CONST	ENDS
;	COMDAT ??_7FzAND@@6B@
CONST	SEGMENT
??_7FzAND@@6B@ DD FLAT:??_R4FzAND@@6B@			; FzAND::`vftable'
	DD	FLAT:??_EFzAND@@UAEPAXI@Z
	DD	FLAT:?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ
	DD	FLAT:?GetDOM@FzAND@@UBENXZ
	DD	FLAT:?ClearDOM@FzAND@@UAEXXZ
	DD	FLAT:?ORwithDOM@FzAND@@UAEXN@Z
CONST	ENDS
;	COMDAT ??_7FuzzyTerm@@6B@
CONST	SEGMENT
??_7FuzzyTerm@@6B@ DD FLAT:??_R4FuzzyTerm@@6B@		; FuzzyTerm::`vftable'
	DD	FLAT:??_EFuzzyTerm@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
CONST	SEGMENT
??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ DB '"'
	DB	00H, 'I', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H
	DB	'O', 00H, 'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, ' ', 00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H
	DB	'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@EMKODCE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@
CONST	SEGMENT
??_C@_1FG@EMKODCE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'I', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '_', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, '1', 00H
	DB	'2', 00H, ':', 00H, ':', 00H, '_', 00H, 'O', 00H, 'r', 00H, 'p'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, '_', 00H, 'm', 00H, 'e', 00H
	DB	'_', 00H, 'u', 00H, 'n', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k'
	DB	00H, 'e', 00H, 'd', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
CONST	SEGMENT
??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ DB 'ITERATOR LIST CORRU'
	DB	'PTED!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@MJBOBEJL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NA@MJBOBEJL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H, '1', 00H
	DB	'3', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@MNEMJBML@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@MNEMJBML@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30133\include\xmemory', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_move@PAPAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@0PAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move@PAPAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@0PAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_move@PAPAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@0PAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_move@PAPAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@0PAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z$0
__unwindtable$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01dH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ$0
__ehfuncinfo$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01dH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ$0
__ehfuncinfo$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
voltbl	SEGMENT
_volmd	DDSymXIndex: 	FLAT:__unwindfunclet$?GetDOM@FzOR@@UBENXZ$0
	DD	016H
_volmd	DDSymXIndex: 	FLAT:__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z$0
	DD	021H
_volmd	DDSymXIndex: 	FLAT:__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z$0
	DD	021H
_volmd	DDSymXIndex: 	FLAT:__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z$0
	DD	021H
_volmd	DDSymXIndex: 	FLAT:__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$0
	DD	029H
_volmd	DDSymXIndex: 	FLAT:__unwindfunclet$?ORwithDOM@FzAND@@UAEXN@Z$0
	DD	016H
_volmd	DDSymXIndex: 	FLAT:__unwindfunclet$?ClearDOM@FzAND@@UAEXXZ$0
	DD	016H
_volmd	DDSymXIndex: 	FLAT:__unwindfunclet$?GetDOM@FzAND@@UBENXZ$0
	DD	016H
_volmd	DDSymXIndex: 	FLAT:__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z$0
	DD	021H
_volmd	DDSymXIndex: 	FLAT:__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z$0
	DD	021H
_volmd	DDSymXIndex: 	FLAT:__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z$0
	DD	021H
_volmd	DDSymXIndex: 	FLAT:__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$0
	DD	029H
voltbl	ENDS
xdata$x	SEGMENT
__unwindtable$?GetDOM@FzOR@@UBENXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetDOM@FzOR@@UBENXZ$0
__unwindtable$?ORwithDOM@FzAND@@UAEXN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ORwithDOM@FzAND@@UAEXN@Z$0
__unwindtable$?ClearDOM@FzAND@@UAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ClearDOM@FzAND@@UAEXXZ$0
__unwindtable$?GetDOM@FzAND@@UBENXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetDOM@FzAND@@UBENXZ$0
__unwindtable$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z$1
__unwindtable$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z$1
__unwindtable$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z$1
__unwindtable$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z$1
__unwindtable$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z$1
__unwindtable$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z$1
__unwindtable$??0FzOR@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$2
__unwindtable$??0FzAND@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$2
__ehfuncinfo$?GetDOM@FzOR@@UBENXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetDOM@FzOR@@UBENXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FzOR@@QAE@ABV0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0FzOR@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ORwithDOM@FzAND@@UAEXN@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ORwithDOM@FzAND@@UAEXN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ClearDOM@FzAND@@UAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ClearDOM@FzAND@@UAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?GetDOM@FzAND@@UBENXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetDOM@FzAND@@UBENXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FzAND@@QAE@ABV0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0FzAND@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range_locked@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range_locked@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z$0
__ehfuncinfo$?_Orphan_range_locked@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range_locked@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_To_address@PAPAVFuzzyTerm@@@std@@YA?A_PABQAPAVFuzzyTerm@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_To_address@PAPAVFuzzyTerm@@@std@@YA?A_PABQAPAVFuzzyTerm@@@Z PROC ; std::_To_address<FuzzyTerm * *>, COMDAT

; 4080 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 4081 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 4082 :     return _Val;

	mov	eax, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [eax]

; 4083 : }

	pop	ebp
	ret	0
??$_To_address@PAPAVFuzzyTerm@@@std@@YA?A_PABQAPAVFuzzyTerm@@@Z ENDP ; std::_To_address<FuzzyTerm * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@PAVFuzzyTerm@@@?$_Uninitialized_backout_al@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@PAVFuzzyTerm@@@?$_Uninitialized_backout_al@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >::_Emplace_back<FuzzyTerm *>, COMDAT
; _this$ = ecx

; 1610 :     _CONSTEXPR20_DYNALLOC void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1611 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR _<_Vals_0>$[ebp]
	push	eax
	call	??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::forward<FuzzyTerm *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$_Unfancy@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z ; std::_Unfancy<FuzzyTerm *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	??$construct@PAVFuzzyTerm@@PAV1@@?$_Default_allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAXAAV?$allocator@PAVFuzzyTerm@@@1@QAPAVFuzzyTerm@@$$QAPAV3@@Z ; std::_Default_allocator_traits<std::allocator<FuzzyTerm *> >::construct<FuzzyTerm *,FuzzyTerm *>
	add	esp, 12					; 0000000cH

; 1612 :         ++_Last;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1613 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back@PAVFuzzyTerm@@@?$_Uninitialized_backout_al@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >::_Emplace_back<FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_Uninitialized_backout_al@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >::_Release, COMDAT
; _this$ = ecx

; 1615 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1616 :         _First = _Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1617 :         return _Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 1618 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Uninitialized_backout_al@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >::~_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >, COMDAT
; _this$ = ecx

; 1605 :     _CONSTEXPR20_DYNALLOC ~_Uninitialized_backout_al() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1606 :         _Destroy_range(_First, _Last, _Al);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAXPAPAVFuzzyTerm@@QAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z ; std::_Destroy_range<std::allocator<FuzzyTerm *> >
	add	esp, 12					; 0000000cH

; 1607 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >::~_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@PAPAVFuzzyTerm@@AAV?$allocator@PAVFuzzyTerm@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@PAPAVFuzzyTerm@@AAV?$allocator@PAVFuzzyTerm@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >::_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >, COMDAT
; _this$ = ecx

; 1600 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Uninitialized_backout_al@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@PAPAVFuzzyTerm@@AAV?$allocator@PAVFuzzyTerm@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >::_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVFuzzyTerm@@PAPAV1@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00@Z
_TEXT	SEGMENT
__Count$ = -28						; size = 4
__Dest_ch$ = -24					; size = 4
__Last_ch$ = -20					; size = 4
__First_ch$ = -16					; size = 4
__DestPtr$ = -12					; size = 4
__LastPtr$ = -8						; size = 4
__FirstPtr$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVFuzzyTerm@@PAPAV1@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00@Z PROC ; std::_Copy_memmove<FuzzyTerm * *,FuzzyTerm * *>, COMDAT

; 4159 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 4160 :     auto _FirstPtr              = _To_address(_First);

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_To_address@PAPAVFuzzyTerm@@@std@@YA?A_PABQAPAVFuzzyTerm@@@Z ; std::_To_address<FuzzyTerm * *>
	add	esp, 4
	mov	DWORD PTR __FirstPtr$[ebp], eax

; 4161 :     auto _LastPtr               = _To_address(_Last);

	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_To_address@PAPAVFuzzyTerm@@@std@@YA?A_PABQAPAVFuzzyTerm@@@Z ; std::_To_address<FuzzyTerm * *>
	add	esp, 4
	mov	DWORD PTR __LastPtr$[ebp], eax

; 4162 :     auto _DestPtr               = _To_address(_Dest);

	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_To_address@PAPAVFuzzyTerm@@@std@@YA?A_PABQAPAVFuzzyTerm@@@Z ; std::_To_address<FuzzyTerm * *>
	add	esp, 4
	mov	DWORD PTR __DestPtr$[ebp], eax

; 4163 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	eax, DWORD PTR __FirstPtr$[ebp]
	mov	DWORD PTR __First_ch$[ebp], eax

; 4164 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	ecx, DWORD PTR __LastPtr$[ebp]
	mov	DWORD PTR __Last_ch$[ebp], ecx

; 4165 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	edx, DWORD PTR __DestPtr$[ebp]
	mov	DWORD PTR __Dest_ch$[ebp], edx

; 4166 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	eax, DWORD PTR __Last_ch$[ebp]
	sub	eax, DWORD PTR __First_ch$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 4167 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First_ch$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest_ch$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4168 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4169 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	eax, DWORD PTR __Dest_ch$[ebp]
	add	eax, DWORD PTR __Count$[ebp]

; 4170 :     } else {
; 4171 :         return _Dest + (_LastPtr - _FirstPtr);
; 4172 :     }
; 4173 : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_memmove@PAPAVFuzzyTerm@@PAPAV1@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<FuzzyTerm * *,FuzzyTerm * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAPAVFuzzyTerm@@@std@@YA?A_TABQAPAVFuzzyTerm@@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Get_unwrapped@ABQAPAVFuzzyTerm@@@std@@YA?A_TABQAPAVFuzzyTerm@@@Z PROC ; std::_Get_unwrapped<FuzzyTerm * * const &>, COMDAT

; 1324 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

	push	ebp
	mov	ebp, esp

; 1325 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1326 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1327 :         return _It + 0;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1328 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1329 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1330 :     } else {
; 1331 :         return static_cast<_Iter&&>(_It);
; 1332 :     }
; 1333 : }

	pop	ebp
	ret	0
??$_Get_unwrapped@ABQAPAVFuzzyTerm@@@std@@YA?A_TABQAPAVFuzzyTerm@@@Z ENDP ; std::_Get_unwrapped<FuzzyTerm * * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 693  :     static _CONSTEXPR20_DYNALLOC void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

	push	ebp
	mov	ebp, esp

; 694  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 695  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 696  :         if (_STD is_constant_evaluated()) {
; 697  :             _Al.deallocate(_Ptr, _Count);
; 698  :         } else
; 699  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 700  :         {
; 701  :             (void) _Al;
; 702  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 703  :         }
; 704  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Get_size_of_n@$03@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$03@std@@YAII@Z PROC			; std::_Get_size_of_n<4>, COMDAT

; 59   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 60   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR __Overflow_is_possible$[ebp], 1

; 61   : 
; 62   :     if constexpr (_Overflow_is_possible) {
; 63   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$1[ebp], 1073741823 ; 3fffffffH

; 64   :         if (_Count > _Max_possible) {

	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	jbe	SHORT $LN2@Get_size_o

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
$LN3@Get_size_o:

; 70   : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$03@std@@YAII@Z ENDP			; std::_Get_size_of_n<4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@0PAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
__Backout$ = -36					; size = 12
__ULast$ = -20						; size = 4
__UFirst$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@0PAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z PROC ; std::_Uninitialized_move<FuzzyTerm * *,std::allocator<FuzzyTerm *> >, COMDAT

; 1693 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_move@PAPAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@0PAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1694 :     // move [_First, _Last) to raw _Dest, using _Al
; 1695 :     // note: only called internally from elsewhere in the STL
; 1696 :     using _Ptrval     = typename _Alloc::value_type*;
; 1697 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Get_unwrapped@ABQAPAVFuzzyTerm@@@std@@YA?A_TABQAPAVFuzzyTerm@@@Z ; std::_Get_unwrapped<FuzzyTerm * * const &>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 1698 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Get_unwrapped@ABQAPAVFuzzyTerm@@@std@@YA?A_TABQAPAVFuzzyTerm@@@Z ; std::_Get_unwrapped<FuzzyTerm * * const &>
	add	esp, 4
	mov	DWORD PTR __ULast$[ebp], eax

; 1699 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1700 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1701 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1702 :         if (!_STD is_constant_evaluated())
; 1703 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1704 :         {
; 1705 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Unfancy@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z ; std::_Unfancy<FuzzyTerm *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __ULast$[ebp]
	push	eax
	mov	ecx, DWORD PTR __UFirst$[ebp]
	push	ecx
	call	??$_Copy_memmove@PAPAVFuzzyTerm@@PAPAV1@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00@Z ; std::_Copy_memmove<FuzzyTerm * *,FuzzyTerm * *>
	add	esp, 12					; 0000000cH

; 1706 :             return _Dest + (_ULast - _UFirst);

	mov	edx, DWORD PTR __ULast$[ebp]
	sub	edx, DWORD PTR __UFirst$[ebp]
	sar	edx, 2
	mov	eax, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [eax+edx*4]
	jmp	SHORT $LN1@Uninitiali

; 1707 :         }
; 1708 :     }
; 1709 : 
; 1710 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@PAPAVFuzzyTerm@@AAV?$allocator@PAVFuzzyTerm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >::_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1711 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	eax, DWORD PTR __UFirst$[ebp]
	add	eax, 4
	mov	DWORD PTR __UFirst$[ebp], eax
$LN4@Uninitiali:
	mov	ecx, DWORD PTR __UFirst$[ebp]
	cmp	ecx, DWORD PTR __ULast$[ebp]
	je	SHORT $LN3@Uninitiali

; 1712 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	edx, DWORD PTR __UFirst$[ebp]
	push	edx
	call	??$move@AAPAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::move<FuzzyTerm * &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??$_Emplace_back@PAVFuzzyTerm@@@?$_Uninitialized_backout_al@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >::_Emplace_back<FuzzyTerm *>

; 1713 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1714 : 
; 1715 :     return _Backout._Release();

	lea	ecx, DWORD PTR __Backout$[ebp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@XZ ; std::_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >::_Release
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >::~_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >
	mov	eax, DWORD PTR $T2[ebp]
$LN1@Uninitiali:

; 1716 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@Uninitiali:
	DD	1
	DD	$LN9@Uninitiali
$LN9@Uninitiali:
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN7@Uninitiali
$LN7@Uninitiali:
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move@PAPAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@0PAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z$0:
	lea	ecx, DWORD PTR __Backout$[ebp]
	jmp	??1?$_Uninitialized_backout_al@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >::~_Uninitialized_backout_al<std::allocator<FuzzyTerm *> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$_Uninitialized_move@PAPAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@0PAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_move@PAPAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@0PAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move@PAPAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@0PAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z ENDP ; std::_Uninitialized_move<FuzzyTerm * *,std::allocator<FuzzyTerm *> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Ptr_container$ = -8					; size = 4
__Block_size$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 134  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 135  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

	mov	eax, DWORD PTR __Bytes$[ebp]
	add	eax, 39					; 00000027H
	mov	DWORD PTR __Block_size$[ebp], eax

; 137  :     if (_Block_size <= _Bytes) {

	mov	ecx, DWORD PTR __Block_size$[ebp]
	cmp	ecx, DWORD PTR __Bytes$[ebp]
	ja	SHORT $LN8@Allocate_m

; 138  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 139  :     }
; 140  : 
; 141  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	edx, DWORD PTR __Block_size$[ebp]
	push	edx
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	mov	DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	cmp	DWORD PTR __Ptr_container$[ebp], 0
	je	SHORT $LN7@Allocate_m
	jmp	SHORT $LN2@Allocate_m
$LN7@Allocate_m:
	push	OFFSET $SG48229
	push	OFFSET $SG48230
	push	0
	push	142					; 0000008eH
	push	OFFSET $SG48231
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@Allocate_m
	int	3
$LN12@Allocate_m:
	push	0
	push	142					; 0000008eH
	push	OFFSET $SG48232
	push	OFFSET $SG48233
	push	OFFSET $SG48234
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Allocate_m
$LN2@Allocate_m:
	xor	edx, edx
	jne	SHORT $LN4@Allocate_m

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	mov	eax, DWORD PTR __Ptr_container$[ebp]
	add	eax, 39					; 00000027H
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR __Ptr$[ebp], eax

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	ecx, 4
	imul	edx, ecx, -1
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 145  : 
; 146  : #ifdef _DEBUG
; 147  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	edx, 4
	imul	eax, edx, -2
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [ecx+eax], -84215046		; fafafafaH

; 148  : #endif // _DEBUG
; 149  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 150  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1444 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1445 : }

	pop	ebp
	ret	0
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z PROC ; std::_Voidify_iter<std::_Container_proxy *>, COMDAT

; 130  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

	push	ebp
	mov	ebp, esp

; 131  :     if constexpr (is_pointer_v<_Iter>) {
; 132  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	eax, DWORD PTR __It$[ebp]

; 133  :     } else {
; 134  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 135  :     }
; 136  : }

	pop	ebp
	ret	0
??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ENDP ; std::_Voidify_iter<std::_Container_proxy *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 275  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 276  : }

	pop	ebp
	ret	0
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 985  : _CONSTEXPR20_DYNALLOC void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 986  :     // deallocate a plain pointer using an allocator
; 987  :     using _Alloc_traits = allocator_traits<_Alloc>;
; 988  :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 989  :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

	push	1
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	add	esp, 12					; 0000000cH

; 990  :     } else {
; 991  :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 992  :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 993  :     }
; 994  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Voidify_iter@PAPAVFuzzyTerm@@@std@@YAPAXPAPAVFuzzyTerm@@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAPAVFuzzyTerm@@@std@@YAPAXPAPAVFuzzyTerm@@@Z PROC ; std::_Voidify_iter<FuzzyTerm * *>, COMDAT

; 130  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

	push	ebp
	mov	ebp, esp

; 131  :     if constexpr (is_pointer_v<_Iter>) {
; 132  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	eax, DWORD PTR __It$[ebp]

; 133  :     } else {
; 134  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 135  :     }
; 136  : }

	pop	ebp
	ret	0
??$_Voidify_iter@PAPAVFuzzyTerm@@@std@@YAPAXPAPAVFuzzyTerm@@@Z ENDP ; std::_Voidify_iter<FuzzyTerm * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 251  : _CONSTEXPR20_DYNALLOC void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 252  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 253  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 254  :     if (_STD is_constant_evaluated()) {
; 255  :         ::operator delete(_Ptr);
; 256  :     } else
; 257  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 258  :     {
; 259  : #if defined(_M_IX86) || defined(_M_X64)
; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 261  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
	add	esp, 8
$LN2@Deallocate:

; 262  :         }
; 263  : #endif // defined(_M_IX86) || defined(_M_X64)
; 264  :         ::operator delete(_Ptr, _Bytes);

	mov	edx, DWORD PTR __Bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 265  :     }
; 266  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAXPAPAVFuzzyTerm@@QAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAXPAPAVFuzzyTerm@@QAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z PROC ; std::_Destroy_range<std::allocator<FuzzyTerm *> >, COMDAT

; 945  :     _Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

	push	ebp
	mov	ebp, esp

; 946  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 947  :     using _Ty = typename _Alloc::value_type;
; 948  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 949  :         for (; _First != _Last; ++_First) {
; 950  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 951  :         }
; 952  :     }
; 953  : }

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAXPAPAVFuzzyTerm@@QAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<FuzzyTerm *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 230  : __declspec(allocator) _CONSTEXPR20_DYNALLOC void* _Allocate(const size_t _Bytes) {

	push	ebp
	mov	ebp, esp

; 231  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 232  : #if defined(_M_IX86) || defined(_M_X64)
; 233  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 234  :     if (!_STD is_constant_evaluated())
; 235  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 236  :     {
; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

	cmp	DWORD PTR __Bytes$[ebp], 0
	je	SHORT $LN3@Allocate

; 244  :         return _Traits::_Allocate(_Bytes);

	mov	ecx, DWORD PTR __Bytes$[ebp]
	push	ecx
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

	xor	eax, eax
$LN1@Allocate:

; 248  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 59   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 60   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR __Overflow_is_possible$[ebp], 1

; 61   : 
; 62   :     if constexpr (_Overflow_is_possible) {
; 63   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$1[ebp], 536870911 ; 1fffffffH

; 64   :         if (_Count > _Max_possible) {

	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	jbe	SHORT $LN2@Get_size_o

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
$LN3@Get_size_o:

; 70   : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$min@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@I@std@@YAABIABI0@Z PROC				; std::min<unsigned int>, COMDAT

; 66   :     const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 67   :     // return smaller of _Left and _Right
; 68   :     return _Right < _Left ? _Right : _Left;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN3@min
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
$LN4@min:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]

; 69   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$min@I@std@@YAABIABI0@Z ENDP				; std::min<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 151  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 152  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 153  :     if (_STD is_constant_evaluated()) {
; 154  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 155  :     } else
; 156  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 157  :     {
; 158  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
	add	esp, 4
	push	eax
	call	??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
	add	esp, 4
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 159  :     }
; 160  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 288  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 289  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 290  : }

	pop	ebp
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
__New_proxy$ = -8					; size = 4
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1073 :     _CONSTEXPR20_CONTAINER void _Alloc_proxy(_Alloc&& _Al) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1074 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

	push	1
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	DWORD PTR __New_proxy$[ebp], eax

; 1075 :         _Construct_in_place(*_New_proxy, this);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_proxy$[ebp]
	push	edx
	call	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
	add	esp, 8

; 1076 :         _Myproxy            = _New_proxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __New_proxy$[ebp]
	mov	DWORD PTR [eax], ecx

; 1077 :         _New_proxy->_Mycont = this;

	mov	edx, DWORD PTR __New_proxy$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 1078 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1><>, COMDAT
; _this$ = ecx

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@PAVFuzzyTerm@@@std@@QAE@XZ ; std::allocator<FuzzyTerm *>::allocator<FuzzyTerm *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<FuzzyTerm *> >::_Vector_val<std::_Simple_types<FuzzyTerm *> >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 998  : _CONSTEXPR20_DYNALLOC void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

	push	ebp
	mov	ebp, esp

; 999  :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 1000 :     using _Ty = typename _Alloc::value_type;
; 1001 :     _Ptr->~_Ty();
; 1002 :     _Deallocate_plain(_Al, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 1003 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 614  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) /* strengthened */ {

	push	ebp
	mov	ebp, esp
	push	ecx

; 615  :     // assign _New_val to _Val, return previous _Val
; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old_val$[ebp], ecx

; 617  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR __New_val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 618  :     return _Old_val;

	mov	eax, DWORD PTR __Old_val$[ebp]

; 619  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0PAVFuzzyTerm@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0PAVFuzzyTerm@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><FuzzyTerm *>, COMDAT
; _this$ = ecx

; 829  :     constexpr allocator(const allocator<_Other>&) noexcept {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0PAVFuzzyTerm@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 838  :     _NODISCARD _CONSTEXPR20_DYNALLOC __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 839  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$07@std@@YAII@Z	; std::_Get_size_of_n<8>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 840  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z
_TEXT	SEGMENT
__Constructed_first$ = -64				; size = 4
__Constructed_last$ = -60				; size = 4
__Newvec$ = -56						; size = 4
__Newcapacity$ = -52					; size = 4
__Newsize$ = -48					; size = 4
__Oldsize$ = -44					; size = 4
__Whereoff$ = -40					; size = 4
__Mylast$ = -36						; size = 4
__Myfirst$ = -32					; size = 4
__My_data$ = -28					; size = 4
__Al$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Emplace_reallocate<FuzzyTerm *>, COMDAT
; _this$ = ecx

; 765  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 48					; 00000030H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 766  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 767  :         _Alty& _Al        = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 768  :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 769  :         pointer& _Myfirst = _My_data._Myfirst;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Myfirst$[ebp], ecx

; 770  :         pointer& _Mylast  = _My_data._Mylast;

	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 8
	mov	DWORD PTR __Mylast$[ebp], edx

; 771  : 
; 772  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 773  : 
; 774  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 2
	mov	DWORD PTR __Whereoff$[ebp], ecx

; 775  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [edx]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 2
	mov	DWORD PTR __Oldsize$[ebp], ecx

; 776  : 
; 777  :         if (_Oldsize == max_size()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::max_size
	cmp	DWORD PTR __Oldsize$[ebp], eax
	jne	SHORT $LN2@Emplace_re

; 778  :             _Xlength();

	call	?_Xlength@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@CAXXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Xlength
$LN2@Emplace_re:

; 779  :         }
; 780  : 
; 781  :         const size_type _Newsize     = _Oldsize + 1;

	mov	edx, DWORD PTR __Oldsize$[ebp]
	add	edx, 1
	mov	DWORD PTR __Newsize$[ebp], edx

; 782  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEII@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Calculate_growth
	mov	DWORD PTR __Newcapacity$[ebp], eax

; 783  : 
; 784  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@PAVFuzzyTerm@@@std@@QAEPAPAVFuzzyTerm@@I@Z ; std::allocator<FuzzyTerm *>::allocate
	mov	DWORD PTR __Newvec$[ebp], eax

; 785  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	mov	edx, DWORD PTR __Whereoff$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+4]
	mov	DWORD PTR __Constructed_last$[ebp], ecx

; 786  :         pointer _Constructed_first      = _Constructed_last;

	mov	edx, DWORD PTR __Constructed_last$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], edx

; 787  : 
; 788  :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 789  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::forward<FuzzyTerm *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Whereoff$[ebp]
	mov	edx, DWORD PTR __Newvec$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	??$_Unfancy@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z ; std::_Unfancy<FuzzyTerm *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$construct@PAVFuzzyTerm@@PAV1@@?$_Default_allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAXAAV?$allocator@PAVFuzzyTerm@@@1@QAPAVFuzzyTerm@@$$QAPAV3@@Z ; std::_Default_allocator_traits<std::allocator<FuzzyTerm *> >::construct<FuzzyTerm *,FuzzyTerm *>
	add	esp, 12					; 0000000cH

; 790  :         _Constructed_first = _Newvec + _Whereoff;

	mov	edx, DWORD PTR __Whereoff$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR __Constructed_first$[ebp], ecx

; 791  : 
; 792  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR __Whereptr$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN4@Emplace_re

; 793  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

	mov	ecx, DWORD PTR __Newvec$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove_if_noexcept@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@00@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove_if_noexcept

; 794  :         } else { // provide basic guarantee

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 795  :             _Umove(_Myfirst, _Whereptr, _Newvec);

	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEPAPAVFuzzyTerm@@PAPAV3@00@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove

; 796  :             _Constructed_first = _Newvec;

	mov	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], ecx

; 797  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

	mov	edx, DWORD PTR __Whereoff$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+4]
	push	ecx
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEPAPAVFuzzyTerm@@PAPAV3@00@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove
$LN5@Emplace_re:
	jmp	SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z$0:

; 798  :         }
; 799  :         _CATCH_ALL
; 800  :         _Destroy(_Constructed_first, _Constructed_last);

	mov	edx, DWORD PTR __Constructed_last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Constructed_first$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@0@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Destroy

; 801  :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@PAVFuzzyTerm@@@std@@QAEXQAPAVFuzzyTerm@@I@Z ; std::allocator<FuzzyTerm *>::deallocate

; 802  :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 803  :         _CATCH_END

	mov	eax, $LN10@Emplace_re
	ret	0
$LN7@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z$1
$LN10@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z$1:

; 804  : 
; 805  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Change_array@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXQAPAVFuzzyTerm@@II@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Change_array

; 806  :         return _Newvec + _Whereoff;

	mov	eax, DWORD PTR __Whereoff$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
$LN6@Emplace_re:

; 807  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Emplace_reallocate<FuzzyTerm *>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAVFuzzyTerm@@PAV1@@?$_Default_allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAXAAV?$allocator@PAVFuzzyTerm@@@1@QAPAVFuzzyTerm@@$$QAPAV3@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAVFuzzyTerm@@PAV1@@?$_Default_allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAXAAV?$allocator@PAVFuzzyTerm@@@1@QAPAVFuzzyTerm@@$$QAPAV3@@Z PROC ; std::_Default_allocator_traits<std::allocator<FuzzyTerm *> >::construct<FuzzyTerm *,FuzzyTerm *>, COMDAT

; 707  :     static _CONSTEXPR20_DYNALLOC void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 708  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 709  :         if (_STD is_constant_evaluated()) {
; 710  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 711  :         } else
; 712  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 713  :         {
; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Voidify_iter@PAPAVFuzzyTerm@@@std@@YAPAXPAPAVFuzzyTerm@@@Z ; std::_Voidify_iter<FuzzyTerm * *>
	add	esp, 4
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::forward<FuzzyTerm *>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 715  :         }
; 716  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@PAVFuzzyTerm@@PAV1@@?$_Default_allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAXAAV?$allocator@PAVFuzzyTerm@@@1@QAPAVFuzzyTerm@@$$QAPAV3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<FuzzyTerm *> >::construct<FuzzyTerm *,FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$_Unfancy@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z PROC ; std::_Unfancy<FuzzyTerm *>, COMDAT

; 288  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 289  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 290  : }

	pop	ebp
	ret	0
??$_Unfancy@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z ENDP ; std::_Unfancy<FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAE?A_T$$QAPAVFuzzyTerm@@@Z
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAE?A_T$$QAPAVFuzzyTerm@@@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Emplace_back_with_unused_capacity<FuzzyTerm *>, COMDAT
; _this$ = ecx

; 721  :     _CONSTEXPR20_CONTAINER decltype(auto) _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 722  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 723  :         auto& _My_data   = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 724  :         pointer& _Mylast = _My_data._Mylast;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Mylast$[ebp], ecx

; 725  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 726  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR _<_Val_0>$[ebp]
	push	edx
	call	??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::forward<FuzzyTerm *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Unfancy@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z ; std::_Unfancy<FuzzyTerm *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Getal
	push	eax
	call	??$construct@PAVFuzzyTerm@@PAV1@@?$_Default_allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAXAAV?$allocator@PAVFuzzyTerm@@@1@QAPAVFuzzyTerm@@$$QAPAV3@@Z ; std::_Default_allocator_traits<std::allocator<FuzzyTerm *> >::construct<FuzzyTerm *,FuzzyTerm *>
	add	esp, 12					; 0000000cH

; 727  :         _Orphan_range(_Mylast, _Mylast);

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Orphan_range

; 728  :         _Ty& _Result = *_Mylast;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Result$[ebp], ecx

; 729  :         ++_Mylast;

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 4
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [ecx], eax

; 730  : #if _HAS_CXX17
; 731  :         return _Result;
; 732  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 733  :         (void) _Result;
; 734  : #endif // _HAS_CXX17
; 735  :     }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back_with_unused_capacity@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAE?A_T$$QAPAVFuzzyTerm@@@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Emplace_back_with_unused_capacity<FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z PROC ; std::forward<FuzzyTerm *>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1444 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1445 : }

	pop	ebp
	ret	0
??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ENDP ; std::forward<FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$emplace_back@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?A_T$$QAPAVFuzzyTerm@@@Z
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?A_T$$QAPAVFuzzyTerm@@@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::emplace_back<FuzzyTerm *>, COMDAT
; _this$ = ecx

; 739  :     _CONSTEXPR20_CONTAINER decltype(auto) emplace_back(_Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 740  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 741  :         auto& _My_data   = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 742  :         pointer& _Mylast = _My_data._Mylast;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Mylast$[ebp], ecx

; 743  :         if (_Mylast != _My_data._Myend) {

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+12]
	je	SHORT $LN2@emplace_ba

; 744  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR _<_Val_0>$[ebp]
	push	edx
	call	??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::forward<FuzzyTerm *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_back_with_unused_capacity@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAE?A_T$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Emplace_back_with_unused_capacity<FuzzyTerm *>
	jmp	SHORT $LN1@emplace_ba
$LN2@emplace_ba:

; 745  :         }
; 746  : 
; 747  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::forward<FuzzyTerm *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Emplace_reallocate<FuzzyTerm *>
	mov	DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 748  : #if _HAS_CXX17
; 749  :         return _Result;
; 750  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 751  :         (void) _Result;
; 752  : #endif // _HAS_CXX17
; 753  :     }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$emplace_back@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?A_T$$QAPAVFuzzyTerm@@@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::emplace_back<FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$move@AAPAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z PROC ; std::move<FuzzyTerm * &>, COMDAT

; 1455 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1456 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1457 : }

	pop	ebp
	ret	0
??$move@AAPAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ENDP ; std::move<FuzzyTerm * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 275  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 276  : }

	pop	ebp
	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@ABV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > const >, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp

; 275  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 276  : }

	pop	ebp
	ret	0
??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___param0$ = 8						; size = 4
___param1$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___param1$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___param0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++, COMDAT
; _this$ = ecx

; 283  :     _CONSTEXPR20_CONTAINER _Vector_iterator& operator++() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 284  :         _Mybase::operator++();

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++

; 285  :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 286  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*, COMDAT
; _this$ = ecx

; 268  :     _NODISCARD _CONSTEXPR20_CONTAINER reference operator*() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 269  :         return const_cast<reference>(_Mybase::operator*());

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*

; 270  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=, COMDAT
; _this$ = ecx
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.cpp

; 49   : }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 266  :     _CONSTEXPR20_CONTAINER _Vector_iterator& operator=(const _Vector_iterator&) noexcept = default;

	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Compat, COMDAT
; _this$ = ecx

; 185  :     _CONSTEXPR20_CONTAINER void _Compat(const _Vector_const_iterator& _Right) const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@Compat:

; 186  :         // test for compatible iterator pair
; 187  : #if _ITERATOR_DEBUG_LEVEL == 0
; 188  :         (void) _Right;
; 189  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv
; 190  :         _STL_VERIFY(this->_Getcont() == _Right._Getcont(), "vector iterators incompatible");

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, eax
	jne	SHORT $LN7@Compat
	jmp	SHORT $LN2@Compat
$LN7@Compat:
	push	OFFSET ??_C@_0BO@CAOBBIOC@vector?5iterators?5incompatible@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	190					; 000000beH
	push	OFFSET ??_C@_0GH@KMHDIFOI@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@Compat
	int	3
$LN11@Compat:
	push	0
	push	190					; 000000beH
	push	OFFSET ??_C@_1MO@NOHEJINP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1NK@PBOLGCJB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
	push	OFFSET ??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Compat
$LN2@Compat:
	xor	edx, edx
	jne	SHORT $LN4@Compat

; 191  : #endif // _ITERATOR_DEBUG_LEVEL == 0
; 192  :     }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=, COMDAT
; _this$ = ecx

; 163  :     _NODISCARD bool operator!=(const _Vector_const_iterator& _Right) const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 164  :         return !(*this == _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 165  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator==, COMDAT
; _this$ = ecx

; 152  :     _NODISCARD _CONSTEXPR20_CONTAINER bool operator==(const _Vector_const_iterator& _Right) const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 153  :         _Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Compat

; 154  :         return _Ptr == _Right._Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 155  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++, COMDAT
; _this$ = ecx

; 71   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator& operator++() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 72   : #if _ITERATOR_DEBUG_LEVEL != 0
; 73   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 74   :         _STL_VERIFY(_Ptr, "can't increment value-initialized vector iterator");

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0DC@KEKNBAEB@can?8t?5increment?5value?9initializ@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	74					; 0000004aH
	push	OFFSET ??_C@_0GH@KMHDIFOI@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	push	0
	push	74					; 0000004aH
	push	OFFSET ??_C@_1MO@NOHEJINP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1OC@CGPGIJAB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
	push	OFFSET ??_C@_1GI@EDCILPL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator
$LN10@operator:

; 75   :         _STL_VERIFY(_Ptr < _Mycont->_Mylast, "can't increment vector iterator past end");

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Mycont$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN13@operator
	jmp	SHORT $LN8@operator
$LN13@operator:
	push	OFFSET ??_C@_0CJ@OAAAAGPM@can?8t?5increment?5vector?5iterator@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	75					; 0000004bH
	push	OFFSET ??_C@_0GH@KMHDIFOI@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	push	0
	push	75					; 0000004bH
	push	OFFSET ??_C@_1MO@NOHEJINP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1OC@CGPGIJAB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
	push	OFFSET ??_C@_1FG@LDPPKMGP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN13@operator
$LN8@operator:
	xor	eax, eax
	jne	SHORT $LN10@operator

; 76   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 77   : 
; 78   :         ++_Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 79   :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 80   :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*, COMDAT
; _this$ = ecx

; 49   :     _NODISCARD _CONSTEXPR20_CONTAINER reference operator*() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 50   : #if _ITERATOR_DEBUG_LEVEL != 0
; 51   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 52   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	52					; 00000034H
	push	OFFSET ??_C@_0GH@KMHDIFOI@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	push	0
	push	52					; 00000034H
	push	OFFSET ??_C@_1MO@NOHEJINP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1OA@BIBNCNDA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
	push	OFFSET ??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator
$LN10@operator:

; 53   :         _STL_VERIFY(

	mov	ecx, DWORD PTR __Mycont$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	ja	SHORT $LN13@operator
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Mycont$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN13@operator
	jmp	SHORT $LN8@operator
$LN13@operator:
	push	OFFSET ??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	54					; 00000036H
	push	OFFSET ??_C@_0GH@KMHDIFOI@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	push	0
	push	54					; 00000036H
	push	OFFSET ??_C@_1MO@NOHEJINP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1OA@BIBNCNDA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
	push	OFFSET ??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN13@operator
$LN8@operator:
	xor	eax, eax
	jne	SHORT $LN10@operator

; 54   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");
; 55   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 56   : 
; 57   :         return *_Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]

; 58   :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=, COMDAT
; _this$ = ecx
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.cpp

; 15   : }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 47   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator& operator=(const _Vector_const_iterator&) noexcept = default;

	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >, COMDAT
; _this$ = ecx

; 42   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 43   :         this->_Adopt(_Pvector);

	mov	edx, DWORD PTR __Pvector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 44   :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >, COMDAT
; _this$ = ecx

; 40   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator() noexcept : _Ptr() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GFzOR@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFzOR@@UAEPAXI@Z PROC				; FzOR::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FzOR@@UAE@XZ				; FzOR::~FzOR
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFzOR@@UAEPAXI@Z ENDP				; FzOR::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.h
;	COMDAT ?ORwithDOM@FzOR@@UAEXN@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_val$ = 8						; size = 8
?ORwithDOM@FzOR@@UAEXN@Z PROC				; FzOR::ORwithDOM, COMDAT
; _this$ = ecx

; 87   :   void ORwithDOM(double val){assert(0 && "<FzOR::ORwithDOM>: invalid context");}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN1@ORwithDOM
	push	87					; 00000057H
	push	OFFSET ??_C@_1GM@CCHCGJJ@?$AAE?$AA?3?$AA?2?$AAD?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAR?$AAa?$AAv?$AAe@
	push	OFFSET ??_C@_1FE@EKNHDPMB@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAO?$AAR@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN1@ORwithDOM:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ORwithDOM@FzOR@@UAEXN@Z ENDP				; FzOR::ORwithDOM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.h
;	COMDAT ?ClearDOM@FzOR@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearDOM@FzOR@@UAEXXZ PROC				; FzOR::ClearDOM, COMDAT
; _this$ = ecx

; 86   :   void ClearDOM(){assert(0 && "<FzOR::ClearDOM>: invalid context");}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN1@ClearDOM
	push	86					; 00000056H
	push	OFFSET ??_C@_1GM@CCHCGJJ@?$AAE?$AA?3?$AA?2?$AAD?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAR?$AAa?$AAv?$AAe@
	push	OFFSET ??_C@_1FC@EJGEACIH@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAC?$AAl@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN1@ClearDOM:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearDOM@FzOR@@UAEXXZ ENDP				; FzOR::ClearDOM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.cpp
_TEXT	SEGMENT
tv132 = -104						; size = 4
tv163 = -100						; size = 8
tv91 = -92						; size = 4
tv140 = -88						; size = 4
tv138 = -84						; size = 4
$T2 = -80						; size = 8
$T3 = -72						; size = 12
$T4 = -57						; size = 1
$T5 = -56						; size = 12
_curTerm$ = -40						; size = 12
_largest$ = -24						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?GetDOM@FzOR@@UBENXZ PROC				; FzOR::GetDOM
; _this$ = ecx

; 147  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetDOM@FzOR@@UBENXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 92					; 0000005cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-104]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 148  :   double largest = MinFloat;

	movsd	xmm0, QWORD PTR __real@3810000000000000
	movsd	QWORD PTR _largest$[ebp], xmm0

; 149  : 
; 150  :   std::vector<FuzzyTerm*>::const_iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 151  :   for (curTerm = m_Terms.begin(); curTerm != m_Terms.end(); ++curTerm)

	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	mov	DWORD PTR tv138[ebp], eax
	mov	ecx, DWORD PTR tv138[ebp]
	push	ecx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@GetDOM
$LN2@GetDOM:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@GetDOM:
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	mov	DWORD PTR tv140[ebp], eax
	mov	eax, DWORD PTR tv140[ebp]
	push	eax
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T4[ebp], al
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	ecx, BYTE PTR $T4[ebp]
	test	ecx, ecx
	je	SHORT $LN3@GetDOM

; 152  :   {
; 153  :     if ((*curTerm)->GetDOM() > largest)

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR tv91[ebp], edx
	mov	eax, DWORD PTR tv91[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR tv91[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR tv163[ebp]
	movsd	xmm0, QWORD PTR tv163[ebp]
	comisd	xmm0, QWORD PTR _largest$[ebp]
	jbe	SHORT $LN5@GetDOM

; 154  :     {
; 155  :       largest = (*curTerm)->GetDOM();

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv132[ebp], ecx
	mov	edx, DWORD PTR tv132[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv132[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR _largest$[ebp]
$LN5@GetDOM:

; 156  :     }
; 157  :   }

	jmp	$LN2@GetDOM
$LN3@GetDOM:

; 158  : 
; 159  :   return largest;

	movsd	xmm0, QWORD PTR _largest$[ebp]
	movsd	QWORD PTR $T2[ebp], xmm0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	fld	QWORD PTR $T2[ebp]

; 160  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@GetDOM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 104				; 00000068H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@GetDOM:
	DD	1
	DD	$LN12@GetDOM
$LN12@GetDOM:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN10@GetDOM
$LN10@GetDOM:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetDOM@FzOR@@UBENXZ$0:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?GetDOM@FzOR@@UBENXZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-104]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetDOM@FzOR@@UBENXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetDOM@FzOR@@UBENXZ ENDP				; FzOR::GetDOM
; Function compile flags: /Odtp /RTCsu
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.h
;	COMDAT ?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ
_TEXT	SEGMENT
tv79 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ PROC			; FzOR::Clone, COMDAT
; _this$ = ecx

; 81   :   FuzzyTerm* Clone()const{return new FzOR(*this);}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN3@Clone
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T2[ebp]
	call	??0FzOR@@QAE@ABV0@@Z			; FzOR::FzOR
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@Clone
$LN3@Clone:
	mov	DWORD PTR tv79[ebp], 0
$LN4@Clone:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T3[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ$0:
	push	20					; 00000014H
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ ENDP			; FzOR::Clone
; Function compile flags: /Odtp /RTCsu
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.cpp
_TEXT	SEGMENT
$T2 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
$T5 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op1$ = 8						; size = 4
_op2$ = 12						; size = 4
_op3$ = 16						; size = 4
_op4$ = 20						; size = 4
??0FzOR@@QAE@AAVFuzzyTerm@@000@Z PROC			; FzOR::FzOR
; _this$ = ecx

; 124  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzOR@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 125  :    m_Terms.push_back(op1.Clone());

	mov	ecx, DWORD PTR _op1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T5[ebp], eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 126  :    m_Terms.push_back(op2.Clone());

	mov	edx, DWORD PTR _op2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T4[ebp], eax
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 127  :    m_Terms.push_back(op3.Clone());

	mov	ecx, DWORD PTR _op3$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op3$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T3[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 128  :    m_Terms.push_back(op4.Clone());

	mov	edx, DWORD PTR _op4$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op4$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 129  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzOR@@QAE@AAVFuzzyTerm@@000@Z ENDP			; FzOR::FzOR
; Function compile flags: /Odtp /RTCsu
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.cpp
_TEXT	SEGMENT
$T2 = -28						; size = 4
$T3 = -24						; size = 4
$T4 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op1$ = 8						; size = 4
_op2$ = 12						; size = 4
_op3$ = 16						; size = 4
??0FzOR@@QAE@AAVFuzzyTerm@@00@Z PROC			; FzOR::FzOR
; _this$ = ecx

; 116  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzOR@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 117  :    m_Terms.push_back(op1.Clone());

	mov	ecx, DWORD PTR _op1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T4[ebp], eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 118  :    m_Terms.push_back(op2.Clone());

	mov	edx, DWORD PTR _op2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T3[ebp], eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 119  :    m_Terms.push_back(op3.Clone());

	mov	ecx, DWORD PTR _op3$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op3$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 120  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzOR@@QAE@AAVFuzzyTerm@@00@Z ENDP			; FzOR::FzOR
; Function compile flags: /Odtp /RTCsu
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.cpp
_TEXT	SEGMENT
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op1$ = 8						; size = 4
_op2$ = 12						; size = 4
??0FzOR@@QAE@AAVFuzzyTerm@@0@Z PROC			; FzOR::FzOR
; _this$ = ecx

; 109  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzOR@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 110  :    m_Terms.push_back(op1.Clone());

	mov	ecx, DWORD PTR _op1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T3[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 111  :    m_Terms.push_back(op2.Clone());

	mov	edx, DWORD PTR _op2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 112  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzOR@@QAE@AAVFuzzyTerm@@0@Z ENDP			; FzOR::FzOR
; Function compile flags: /Odtp /RTCsu
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.cpp
_TEXT	SEGMENT
tv146 = -80						; size = 4
tv158 = -76						; size = 4
tv156 = -72						; size = 4
$T2 = -68						; size = 4
$T3 = -64						; size = 12
$T4 = -49						; size = 1
$T5 = -48						; size = 12
_curTerm$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_fa$ = 8						; size = 4
??0FzOR@@QAE@ABV0@@Z PROC				; FzOR::FzOR
; _this$ = ecx

; 99   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzOR@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzOR@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 100  :    std::vector<FuzzyTerm*>::const_iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 101  :    for (curTerm = fa.m_Terms.begin(); curTerm != fa.m_Terms.end(); ++curTerm)

	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fa$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	mov	DWORD PTR tv156[ebp], eax
	mov	edx, DWORD PTR tv156[ebp]
	push	edx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@FzOR
$LN2@FzOR:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@FzOR:
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _fa$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	mov	DWORD PTR tv158[ebp], eax
	mov	ecx, DWORD PTR tv158[ebp]
	push	ecx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T4[ebp], al
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	edx, BYTE PTR $T4[ebp]
	test	edx, edx
	je	SHORT $LN3@FzOR

; 102  :    {
; 103  :      m_Terms.push_back((*curTerm)->Clone());

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv146[ebp], eax
	mov	ecx, DWORD PTR tv146[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv146[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 104  :    }

	jmp	SHORT $LN2@FzOR
$LN3@FzOR:

; 105  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@FzOR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN14@FzOR:
	DD	1
	DD	$LN13@FzOR
$LN13@FzOR:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN11@FzOR
$LN11@FzOR:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$2:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0FzOR@@QAE@ABV0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzOR@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzOR@@QAE@ABV0@@Z ENDP				; FzOR::FzOR
; Function compile flags: /Odtp /RTCsu
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.cpp
_TEXT	SEGMENT
tv147 = -60						; size = 4
$T1 = -56						; size = 4
$T2 = -52						; size = 12
$T3 = -37						; size = 1
$T4 = -36						; size = 12
_curTerm$ = -20						; size = 12
_this$ = -4						; size = 4
??1FzOR@@UAE@XZ PROC					; FzOR::~FzOR
; _this$ = ecx

; 133  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzOR@@6B@

; 134  :   std::vector<FuzzyTerm*>::iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ

; 135  :   for (curTerm = m_Terms.begin(); curTerm != m_Terms.end(); ++curTerm)

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	push	eax
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@FzOR
$LN2@FzOR:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@FzOR:
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	push	eax
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T3[ebp], al
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	eax, BYTE PTR $T3[ebp]
	test	eax, eax
	je	SHORT $LN3@FzOR

; 136  :   {
; 137  :     delete *curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN6@FzOR
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv147[ebp], eax
	jmp	SHORT $LN7@FzOR
$LN6@FzOR:
	mov	DWORD PTR tv147[ebp], 0
$LN7@FzOR:

; 138  :   }

	jmp	SHORT $LN2@FzOR
$LN3@FzOR:

; 139  : }

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@FzOR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@FzOR:
	DD	1
	DD	$LN9@FzOR
$LN9@FzOR:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN8@FzOR
$LN8@FzOR:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
??1FzOR@@UAE@XZ ENDP					; FzOR::~FzOR
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GFzAND@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFzAND@@UAEPAXI@Z PROC				; FzAND::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FzAND@@UAE@XZ			; FzAND::~FzAND
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFzAND@@UAEPAXI@Z ENDP				; FzAND::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.cpp
_TEXT	SEGMENT
tv131 = -76						; size = 4
tv139 = -72						; size = 4
tv137 = -68						; size = 4
$T2 = -64						; size = 12
$T3 = -49						; size = 1
$T4 = -48						; size = 12
_curTerm$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_val$ = 8						; size = 8
?ORwithDOM@FzAND@@UAEXN@Z PROC				; FzAND::ORwithDOM
; _this$ = ecx

; 75   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ORwithDOM@FzAND@@UAEXN@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 76   :   std::vector<FuzzyTerm*>::iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 77   :   for (curTerm = m_Terms.begin(); curTerm != m_Terms.end(); ++curTerm)

	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	mov	DWORD PTR tv137[ebp], eax
	mov	ecx, DWORD PTR tv137[ebp]
	push	ecx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@ORwithDOM
$LN2@ORwithDOM:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@ORwithDOM:
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	mov	DWORD PTR tv139[ebp], eax
	mov	eax, DWORD PTR tv139[ebp]
	push	eax
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T3[ebp], al
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	ecx, BYTE PTR $T3[ebp]
	test	ecx, ecx
	je	SHORT $LN3@ORwithDOM

; 78   :   {
; 79   :     (*curTerm)->ORwithDOM(val);

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR tv131[ebp], edx
	mov	esi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR _val$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR tv131[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv131[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 80   :   }

	jmp	SHORT $LN2@ORwithDOM
$LN3@ORwithDOM:

; 81   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@ORwithDOM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN12@ORwithDOM:
	DD	1
	DD	$LN11@ORwithDOM
$LN11@ORwithDOM:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN9@ORwithDOM
$LN9@ORwithDOM:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ORwithDOM@FzAND@@UAEXN@Z$0:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?ORwithDOM@FzAND@@UAEXN@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ORwithDOM@FzAND@@UAEXN@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ORwithDOM@FzAND@@UAEXN@Z ENDP				; FzAND::ORwithDOM
; Function compile flags: /Odtp /RTCsu
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.cpp
_TEXT	SEGMENT
tv131 = -76						; size = 4
tv138 = -72						; size = 4
tv136 = -68						; size = 4
$T2 = -64						; size = 12
$T3 = -49						; size = 1
$T4 = -48						; size = 12
_curTerm$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?ClearDOM@FzAND@@UAEXXZ PROC				; FzAND::ClearDOM
; _this$ = ecx

; 85   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ClearDOM@FzAND@@UAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 86   :   std::vector<FuzzyTerm*>::iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 87   :   for (curTerm = m_Terms.begin(); curTerm != m_Terms.end(); ++curTerm)

	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	mov	DWORD PTR tv136[ebp], eax
	mov	ecx, DWORD PTR tv136[ebp]
	push	ecx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@ClearDOM
$LN2@ClearDOM:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@ClearDOM:
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	mov	DWORD PTR tv138[ebp], eax
	mov	eax, DWORD PTR tv138[ebp]
	push	eax
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T3[ebp], al
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	ecx, BYTE PTR $T3[ebp]
	test	ecx, ecx
	je	SHORT $LN3@ClearDOM

; 88   :   {
; 89   :     (*curTerm)->ClearDOM();

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR tv131[ebp], edx
	mov	eax, DWORD PTR tv131[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR tv131[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 90   :   }

	jmp	SHORT $LN2@ClearDOM
$LN3@ClearDOM:

; 91   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@ClearDOM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@ClearDOM:
	DD	1
	DD	$LN11@ClearDOM
$LN11@ClearDOM:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN9@ClearDOM
$LN9@ClearDOM:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ClearDOM@FzAND@@UAEXXZ$0:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?ClearDOM@FzAND@@UAEXXZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ClearDOM@FzAND@@UAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ClearDOM@FzAND@@UAEXXZ ENDP				; FzAND::ClearDOM
; Function compile flags: /Odtp /RTCsu
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.cpp
_TEXT	SEGMENT
tv132 = -104						; size = 4
tv163 = -100						; size = 8
tv91 = -92						; size = 4
tv140 = -88						; size = 4
tv138 = -84						; size = 4
$T2 = -80						; size = 8
$T3 = -72						; size = 12
$T4 = -57						; size = 1
$T5 = -56						; size = 12
_curTerm$ = -40						; size = 12
_smallest$ = -24					; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?GetDOM@FzAND@@UBENXZ PROC				; FzAND::GetDOM
; _this$ = ecx

; 57   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetDOM@FzAND@@UBENXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 92					; 0000005cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-104]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 58   :   double smallest = MaxDouble;

	movsd	xmm0, QWORD PTR __real@7fefffffffffffff
	movsd	QWORD PTR _smallest$[ebp], xmm0

; 59   : 
; 60   :   std::vector<FuzzyTerm*>::const_iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 61   :   for (curTerm = m_Terms.begin(); curTerm != m_Terms.end(); ++curTerm)

	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	mov	DWORD PTR tv138[ebp], eax
	mov	ecx, DWORD PTR tv138[ebp]
	push	ecx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@GetDOM
$LN2@GetDOM:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@GetDOM:
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	mov	DWORD PTR tv140[ebp], eax
	mov	eax, DWORD PTR tv140[ebp]
	push	eax
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T4[ebp], al
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	ecx, BYTE PTR $T4[ebp]
	test	ecx, ecx
	je	SHORT $LN3@GetDOM

; 62   :   {
; 63   :     if ((*curTerm)->GetDOM() < smallest)

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR tv91[ebp], edx
	mov	eax, DWORD PTR tv91[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR tv91[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR tv163[ebp]
	movsd	xmm0, QWORD PTR _smallest$[ebp]
	comisd	xmm0, QWORD PTR tv163[ebp]
	jbe	SHORT $LN5@GetDOM

; 64   :     {
; 65   :       smallest = (*curTerm)->GetDOM();

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv132[ebp], ecx
	mov	edx, DWORD PTR tv132[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv132[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR _smallest$[ebp]
$LN5@GetDOM:

; 66   :     }
; 67   :   }

	jmp	$LN2@GetDOM
$LN3@GetDOM:

; 68   : 
; 69   :   return smallest;

	movsd	xmm0, QWORD PTR _smallest$[ebp]
	movsd	QWORD PTR $T2[ebp], xmm0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	fld	QWORD PTR $T2[ebp]

; 70   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@GetDOM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 104				; 00000068H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@GetDOM:
	DD	1
	DD	$LN12@GetDOM
$LN12@GetDOM:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN10@GetDOM
$LN10@GetDOM:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetDOM@FzAND@@UBENXZ$0:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?GetDOM@FzAND@@UBENXZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-104]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetDOM@FzAND@@UBENXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetDOM@FzAND@@UBENXZ ENDP				; FzAND::GetDOM
; Function compile flags: /Odtp /RTCsu
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.h
;	COMDAT ?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ
_TEXT	SEGMENT
tv79 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ PROC			; FzAND::Clone, COMDAT
; _this$ = ecx

; 45   :   FuzzyTerm* Clone()const{return new FzAND(*this);}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN3@Clone
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T2[ebp]
	call	??0FzAND@@QAE@ABV0@@Z			; FzAND::FzAND
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@Clone
$LN3@Clone:
	mov	DWORD PTR tv79[ebp], 0
$LN4@Clone:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T3[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ$0:
	push	20					; 00000014H
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ ENDP			; FzAND::Clone
; Function compile flags: /Odtp /RTCsu
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.cpp
_TEXT	SEGMENT
$T2 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
$T5 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op1$ = 8						; size = 4
_op2$ = 12						; size = 4
_op3$ = 16						; size = 4
_op4$ = 20						; size = 4
??0FzAND@@QAE@AAVFuzzyTerm@@000@Z PROC			; FzAND::FzAND
; _this$ = ecx

; 34   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzAND@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 35   :    m_Terms.push_back(op1.Clone());

	mov	ecx, DWORD PTR _op1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T5[ebp], eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 36   :    m_Terms.push_back(op2.Clone());

	mov	edx, DWORD PTR _op2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T4[ebp], eax
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 37   :    m_Terms.push_back(op3.Clone());

	mov	ecx, DWORD PTR _op3$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op3$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T3[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 38   :    m_Terms.push_back(op4.Clone());

	mov	edx, DWORD PTR _op4$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op4$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 39   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzAND@@QAE@AAVFuzzyTerm@@000@Z ENDP			; FzAND::FzAND
; Function compile flags: /Odtp /RTCsu
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.cpp
_TEXT	SEGMENT
$T2 = -28						; size = 4
$T3 = -24						; size = 4
$T4 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op1$ = 8						; size = 4
_op2$ = 12						; size = 4
_op3$ = 16						; size = 4
??0FzAND@@QAE@AAVFuzzyTerm@@00@Z PROC			; FzAND::FzAND
; _this$ = ecx

; 26   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzAND@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 27   :    m_Terms.push_back(op1.Clone());

	mov	ecx, DWORD PTR _op1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T4[ebp], eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 28   :    m_Terms.push_back(op2.Clone());

	mov	edx, DWORD PTR _op2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T3[ebp], eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 29   :    m_Terms.push_back(op3.Clone());

	mov	ecx, DWORD PTR _op3$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op3$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 30   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzAND@@QAE@AAVFuzzyTerm@@00@Z ENDP			; FzAND::FzAND
; Function compile flags: /Odtp /RTCsu
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.cpp
_TEXT	SEGMENT
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op1$ = 8						; size = 4
_op2$ = 12						; size = 4
??0FzAND@@QAE@AAVFuzzyTerm@@0@Z PROC			; FzAND::FzAND
; _this$ = ecx

; 19   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzAND@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 20   :    m_Terms.push_back(op1.Clone());

	mov	ecx, DWORD PTR _op1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T3[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 21   :    m_Terms.push_back(op2.Clone());

	mov	edx, DWORD PTR _op2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 22   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzAND@@QAE@AAVFuzzyTerm@@0@Z ENDP			; FzAND::FzAND
; Function compile flags: /Odtp /RTCsu
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.cpp
_TEXT	SEGMENT
tv146 = -80						; size = 4
tv158 = -76						; size = 4
tv156 = -72						; size = 4
$T2 = -68						; size = 4
$T3 = -64						; size = 12
$T4 = -49						; size = 1
$T5 = -48						; size = 12
_curTerm$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_fa$ = 8						; size = 4
??0FzAND@@QAE@ABV0@@Z PROC				; FzAND::FzAND
; _this$ = ecx

; 9    : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzAND@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzAND@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 10   :    std::vector<FuzzyTerm*>::const_iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 11   :    for (curTerm = fa.m_Terms.begin(); curTerm != fa.m_Terms.end(); ++curTerm)

	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fa$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	mov	DWORD PTR tv156[ebp], eax
	mov	edx, DWORD PTR tv156[ebp]
	push	edx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@FzAND
$LN2@FzAND:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@FzAND:
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _fa$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	mov	DWORD PTR tv158[ebp], eax
	mov	ecx, DWORD PTR tv158[ebp]
	push	ecx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T4[ebp], al
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	edx, BYTE PTR $T4[ebp]
	test	edx, edx
	je	SHORT $LN3@FzAND

; 12   :    {
; 13   :      m_Terms.push_back((*curTerm)->Clone());

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv146[ebp], eax
	mov	ecx, DWORD PTR tv146[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv146[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 14   :    }

	jmp	SHORT $LN2@FzAND
$LN3@FzAND:

; 15   : }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@FzAND
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN14@FzAND:
	DD	1
	DD	$LN13@FzAND
$LN13@FzAND:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN11@FzAND
$LN11@FzAND:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$2:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0FzAND@@QAE@ABV0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzAND@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzAND@@QAE@ABV0@@Z ENDP				; FzAND::FzAND
; Function compile flags: /Odtp /RTCsu
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.cpp
_TEXT	SEGMENT
tv147 = -60						; size = 4
$T1 = -56						; size = 4
$T2 = -52						; size = 12
$T3 = -37						; size = 1
$T4 = -36						; size = 12
_curTerm$ = -20						; size = 12
_this$ = -4						; size = 4
??1FzAND@@UAE@XZ PROC					; FzAND::~FzAND
; _this$ = ecx

; 43   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzAND@@6B@

; 44   :   std::vector<FuzzyTerm*>::iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ

; 45   :   for (curTerm = m_Terms.begin(); curTerm != m_Terms.end(); ++curTerm)

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	push	eax
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@FzAND
$LN2@FzAND:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@FzAND:
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	push	eax
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T3[ebp], al
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	eax, BYTE PTR $T3[ebp]
	test	eax, eax
	je	SHORT $LN3@FzAND

; 46   :   {
; 47   :     delete *curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN6@FzAND
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv147[ebp], eax
	jmp	SHORT $LN7@FzAND
$LN6@FzAND:
	mov	DWORD PTR tv147[ebp], 0
$LN7@FzAND:

; 48   :   }

	jmp	SHORT $LN2@FzAND
$LN3@FzAND:

; 49   : }

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@FzAND
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@FzAND:
	DD	1
	DD	$LN9@FzAND
$LN9@FzAND:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN8@FzAND
$LN8@FzAND:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
??1FzAND@@UAE@XZ ENDP					; FzAND::~FzAND
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABV?$allocator@PAVFuzzyTerm@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABV?$allocator@PAVFuzzyTerm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1382 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1383 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABV?$allocator@PAVFuzzyTerm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1378 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1379 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<FuzzyTerm *> >::_Vector_val<std::_Simple_types<FuzzyTerm *> >, COMDAT
; _this$ = ecx

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<FuzzyTerm *> >::_Vector_val<std::_Simple_types<FuzzyTerm *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEABV?$allocator@PAVFuzzyTerm@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEABV?$allocator@PAVFuzzyTerm@@@2@XZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Getal, COMDAT
; _this$ = ecx

; 1821 :     _NODISCARD _CONSTEXPR20_CONTAINER const _Alty& _Getal() const noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1822 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first

; 1823 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEABV?$allocator@PAVFuzzyTerm@@@2@XZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Getal, COMDAT
; _this$ = ecx

; 1817 :     _NODISCARD _CONSTEXPR20_CONTAINER _Alty& _Getal() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1818 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first

; 1819 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1802 :     _CONSTEXPR20_CONTAINER void _Orphan_range(pointer _First, pointer _Last) const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1803 :         // orphan iterators within specified (inclusive) range
; 1804 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1805 :         if (_STD is_constant_evaluated()) {
; 1806 :             _Orphan_range_unlocked(_First, _Last);
; 1807 :         } else
; 1808 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1809 :         {
; 1810 :             _Orphan_range_locked(_First, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range_locked@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Orphan_range_locked

; 1811 :         }
; 1812 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range_locked@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Orphan_range_locked, COMDAT
; _this$ = ecx

; 1797 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range_locked@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1798 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1799 :         _Orphan_range_unlocked(_First, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range_unlocked@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Orphan_range_unlocked

; 1800 :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Orphan_ran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN7@Orphan_ran:
	DD	1
	DD	$LN6@Orphan_ran
$LN6@Orphan_ran:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN4@Orphan_ran
$LN4@Orphan_ran:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range_locked@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?_Orphan_range_locked@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range_locked@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range_locked@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Orphan_range_locked
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z
_TEXT	SEGMENT
__Temp$1 = -20						; size = 4
__Temp$2 = -16						; size = 4
__Pnextptr$3 = -12					; size = 4
__Pnext$ = -8						; size = 4
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range_unlocked@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Orphan_range_unlocked, COMDAT
; _this$ = ecx

; 1782 :     _CONSTEXPR20_CONTAINER void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 1783 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx
$LN2@Orphan_ran:

; 1784 :         while (*_Pnext) {

	mov	edx, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN1@Orphan_ran

; 1785 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Pnextptr$3[ebp], edx

; 1786 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	eax, DWORD PTR __Pnextptr$3[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jb	SHORT $LN6@Orphan_ran
	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __Pnextptr$3[ebp]
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1787 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Temp$2[ebp], eax

; 1788 :                 _Pnext           = &_Temp->_Mynextiter;

	mov	ecx, DWORD PTR __Temp$2[ebp]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx

; 1789 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 1790 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Temp$1[ebp], eax

; 1791 :                 _Temp->_Myproxy  = nullptr;

	mov	ecx, DWORD PTR __Temp$1[ebp]
	mov	DWORD PTR [ecx], 0

; 1792 :                 *_Pnext          = _Temp->_Mynextiter;

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR __Temp$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx], ecx
$LN5@Orphan_ran:

; 1793 :             }
; 1794 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN1@Orphan_ran:

; 1795 :     }

	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range_unlocked@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@CAXXZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Xlength, COMDAT

; 1773 :     [[noreturn]] static void _Xlength() {

	push	ebp
	mov	ebp, esp

; 1774 :         _Xlength_error("vector too long");

	push	OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1775 :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Xlength@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@CAXXZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Tidy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
__Myend$ = -32						; size = 4
__Mylast$ = -28						; size = 4
__Myfirst$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXXZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Tidy, COMDAT
; _this$ = ecx

; 1755 :     _CONSTEXPR20_CONTAINER void _Tidy() noexcept { // free all storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Tidy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1756 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1757 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Myfirst$[ebp], ecx

; 1758 :         pointer& _Mylast  = _My_data._Mylast;

	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 8
	mov	DWORD PTR __Mylast$[ebp], edx

; 1759 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 1760 : 
; 1761 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1762 : 
; 1763 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR __Myfirst$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Tidy

; 1764 :             _Destroy(_Myfirst, _Mylast);

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@0@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Destroy

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	eax, DWORD PTR __Myend$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Getal
	mov	ecx, eax
	call	?deallocate@?$allocator@PAVFuzzyTerm@@@std@@QAEXQAPAVFuzzyTerm@@I@Z ; std::allocator<FuzzyTerm *>::deallocate

; 1766 : 
; 1767 :             _Myfirst = nullptr;

	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	DWORD PTR [edx], 0

; 1768 :             _Mylast  = nullptr;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [eax], 0

; 1769 :             _Myend   = nullptr;

	mov	ecx, DWORD PTR __Myend$[ebp]
	mov	DWORD PTR [ecx], 0
$LN3@Tidy:

; 1770 :         }
; 1771 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXXZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXXZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Tidy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Change_array@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXQAPAVFuzzyTerm@@II@Z
_TEXT	SEGMENT
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
__Myfirst$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXQAPAVFuzzyTerm@@II@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Change_array, COMDAT
; _this$ = ecx

; 1736 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1737 :         // orphan all iterators, discard old array, acquire new array
; 1738 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1739 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Myfirst$[ebp], ecx

; 1740 :         pointer& _Mylast  = _My_data._Mylast;

	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 8
	mov	DWORD PTR __Mylast$[ebp], edx

; 1741 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 1742 : 
; 1743 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1744 : 
; 1745 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR __Myfirst$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN2@Change_arr

; 1746 :             _Destroy(_Myfirst, _Mylast);

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@0@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Destroy

; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	eax, DWORD PTR __Myend$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Getal
	mov	ecx, eax
	call	?deallocate@?$allocator@PAVFuzzyTerm@@@std@@QAEXQAPAVFuzzyTerm@@I@Z ; std::allocator<FuzzyTerm *>::deallocate
$LN2@Change_arr:

; 1748 :         }
; 1749 : 
; 1750 :         _Myfirst = _Newvec;

	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [edx], eax

; 1751 :         _Mylast  = _Newvec + _Newsize;

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	edx, DWORD PTR __Newvec$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [ecx], eax

; 1752 :         _Myend   = _Newvec + _Newcapacity;

	mov	edx, DWORD PTR __Newcapacity$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR __Myend$[ebp]
	mov	DWORD PTR [edx], ecx

; 1753 :     }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Change_array@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXQAPAVFuzzyTerm@@II@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Calculate_growth@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -16					; size = 4
__Max$ = -12						; size = 4
__Oldcapacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEII@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1683 :     _CONSTEXPR20_CONTAINER size_type _Calculate_growth(const size_type _Newsize) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1684 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1685 :         const size_type _Oldcapacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::capacity
	mov	DWORD PTR __Oldcapacity$[ebp], eax

; 1686 :         const auto _Max              = max_size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::max_size
	mov	DWORD PTR __Max$[ebp], eax

; 1687 : 
; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	eax, DWORD PTR __Oldcapacity$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR __Max$[ebp]
	sub	ecx, eax
	cmp	DWORD PTR __Oldcapacity$[ebp], ecx
	jbe	SHORT $LN2@Calculate_

; 1689 :             return _Max; // geometric growth would overflow

	mov	eax, DWORD PTR __Max$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1690 :         }
; 1691 : 
; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	mov	edx, DWORD PTR __Oldcapacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Oldcapacity$[ebp]
	mov	DWORD PTR __Geometric$[ebp], edx

; 1693 : 
; 1694 :         if (_Geometric < _Newsize) {

	mov	eax, DWORD PTR __Geometric$[ebp]
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@Calculate_

; 1695 :             return _Newsize; // geometric growth would be insufficient

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1696 :         }
; 1697 : 
; 1698 :         return _Geometric; // geometric growth is sufficient

	mov	eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1699 :     }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Calculate_growth@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEII@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@0@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Destroy, COMDAT
; _this$ = ecx

; 1678 :     _CONSTEXPR20_CONTAINER void _Destroy(pointer _First, pointer _Last) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1679 :         // destroy [_First, _Last) using allocator
; 1680 :         _Destroy_range(_First, _Last, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Getal
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Destroy_range@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAXPAPAVFuzzyTerm@@QAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z ; std::_Destroy_range<std::allocator<FuzzyTerm *> >
	add	esp, 12					; 0000000cH

; 1681 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@0@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@00@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@00@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1672 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1673 :         // move_if_noexcept [_First, _Last) to raw _Dest, using allocator
; 1674 :         _Umove_if_noexcept1(_First, _Last, _Dest,

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove_if_noexcept1@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@00U?$integral_constant@_N$00@2@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove_if_noexcept1

; 1675 :             bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
; 1676 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@00@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1662 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1663 :         // move [_First, _Last) to raw _Dest, using allocator
; 1664 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_move@PAPAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@0PAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z ; std::_Uninitialized_move<FuzzyTerm * *,std::allocator<FuzzyTerm *> >
	add	esp, 16					; 00000010H

; 1665 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEPAPAVFuzzyTerm@@PAPAV3@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEPAPAVFuzzyTerm@@PAPAV3@00@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove, COMDAT
; _this$ = ecx

; 1657 :     _CONSTEXPR20_CONTAINER pointer _Umove(pointer _First, pointer _Last, pointer _Dest) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1658 :         // move [_First, _Last) to raw _Dest, using allocator
; 1659 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_move@PAPAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@0PAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z ; std::_Uninitialized_move<FuzzyTerm * *,std::allocator<FuzzyTerm *> >
	add	esp, 16					; 00000010H

; 1660 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Umove@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEPAPAVFuzzyTerm@@PAPAV3@00@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::capacity, COMDAT
; _this$ = ecx

; 1557 :     _NODISCARD _CONSTEXPR20_CONTAINER size_type capacity() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1558 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 1560 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?max_size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::max_size, COMDAT
; _this$ = ecx

; 1552 :     _NODISCARD _CONSTEXPR20_CONTAINER size_type max_size() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1553 :         return (_STD min)(

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEABV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAIABV?$allocator@PAVFuzzyTerm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<FuzzyTerm *> >::max_size
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$min@I@std@@YAABIABI0@Z		; std::min<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 1554 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1555 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end, COMDAT
; _this$ = ecx

; 1489 :     _NODISCARD _CONSTEXPR20_CONTAINER const_iterator end() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1490 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1491 :         return const_iterator(_My_data._Mylast, _STD addressof(_My_data));

	mov	ecx, DWORD PTR __My_data$[ebp]
	push	ecx
	call	??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@ABV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > const >
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1492 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end, COMDAT
; _this$ = ecx

; 1484 :     _NODISCARD _CONSTEXPR20_CONTAINER iterator end() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1485 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1486 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

	mov	ecx, DWORD PTR __My_data$[ebp]
	push	ecx
	call	??$addressof@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1487 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin, COMDAT
; _this$ = ecx

; 1479 :     _NODISCARD _CONSTEXPR20_CONTAINER const_iterator begin() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1480 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1481 :         return const_iterator(_My_data._Myfirst, _STD addressof(_My_data));

	mov	ecx, DWORD PTR __My_data$[ebp]
	push	ecx
	call	??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@ABV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > const >
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1482 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin, COMDAT
; _this$ = ecx

; 1474 :     _NODISCARD _CONSTEXPR20_CONTAINER iterator begin() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1475 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1476 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

	mov	ecx, DWORD PTR __My_data$[ebp]
	push	ecx
	call	??$addressof@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1477 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back, COMDAT
; _this$ = ecx

; 759  :     _CONSTEXPR20_CONTAINER void push_back(_Ty&& _Val) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 760  :         // insert by moving into element at end, provide strong guarantee
; 761  :         emplace_back(_STD move(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$move@AAPAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::move<FuzzyTerm * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$emplace_back@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?A_T$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::emplace_back<FuzzyTerm *>

; 762  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -24						; size = 4
_$S1$ = -13						; size = 1
__Alproxy$ = -8						; size = 4
_this$ = -4						; size = 4
??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >, COMDAT
; _this$ = ecx

; 711  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 712  :         _Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Tidy

; 713  : #if _ITERATOR_DEBUG_LEVEL != 0
; 714  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S1$[ebp]
	call	??$?0PAVFuzzyTerm@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><FuzzyTerm *>
	lea	eax, DWORD PTR _$S1$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 715  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	DWORD PTR $T1[ebp], 0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR __Alproxy$[ebp]
	push	eax
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 716  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 717  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@vector
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@vector:
	DD	1
	DD	$LN4@vector
$LN4@vector:
	DD	-13					; fffffff3H
	DD	1
	DD	$LN3@vector
$LN3@vector:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	49					; 00000031H
	DB	0
??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -18						; size = 1
$T3 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >, COMDAT
; _this$ = ecx

; 476  :         : _Mypair(_Zero_then_variadic_args_t{}) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1><>

; 477  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Getal
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??$?0PAVFuzzyTerm@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><FuzzyTerm *>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 478  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAIABV?$allocator@PAVFuzzyTerm@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAIABV?$allocator@PAVFuzzyTerm@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<FuzzyTerm *> >::max_size, COMDAT

; 727  :     _NODISCARD static _CONSTEXPR20_DYNALLOC size_type max_size(const _Alloc&) noexcept {

	push	ebp
	mov	ebp, esp

; 728  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	eax, 1073741823				; 3fffffffH

; 729  :     }

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAIABV?$allocator@PAVFuzzyTerm@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<FuzzyTerm *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?allocate@?$allocator@PAVFuzzyTerm@@@std@@QAEPAPAVFuzzyTerm@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVFuzzyTerm@@@std@@QAEPAPAVFuzzyTerm@@I@Z PROC ; std::allocator<FuzzyTerm *>::allocate, COMDAT
; _this$ = ecx

; 838  :     _NODISCARD _CONSTEXPR20_DYNALLOC __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 839  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$03@std@@YAII@Z	; std::_Get_size_of_n<4>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 840  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVFuzzyTerm@@@std@@QAEPAPAVFuzzyTerm@@I@Z ENDP ; std::allocator<FuzzyTerm *>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?deallocate@?$allocator@PAVFuzzyTerm@@@std@@QAEXQAPAVFuzzyTerm@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PAVFuzzyTerm@@@std@@QAEXQAPAVFuzzyTerm@@I@Z PROC ; std::allocator<FuzzyTerm *>::deallocate, COMDAT
; _this$ = ecx

; 833  :     _CONSTEXPR20_DYNALLOC void deallocate(_Ty* const _Ptr, const size_t _Count) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 834  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 836  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVFuzzyTerm@@@std@@QAEXQAPAVFuzzyTerm@@I@Z ENDP ; std::allocator<FuzzyTerm *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$allocator@PAVFuzzyTerm@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAVFuzzyTerm@@@std@@QAE@XZ PROC		; std::allocator<FuzzyTerm *>::allocator<FuzzyTerm *>, COMDAT
; _this$ = ecx

; 825  :     constexpr allocator() noexcept {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAVFuzzyTerm@@@std@@QAE@XZ ENDP		; std::allocator<FuzzyTerm *>::allocator<FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GFuzzyTerm@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFuzzyTerm@@UAEPAXI@Z PROC				; FuzzyTerm::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFuzzyTerm@@UAEPAXI@Z ENDP				; FuzzyTerm::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0FuzzyTerm@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0FuzzyTerm@@QAE@XZ PROC				; FuzzyTerm::FuzzyTerm, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FuzzyTerm@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0FuzzyTerm@@QAE@XZ ENDP				; FuzzyTerm::FuzzyTerm
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyTerm.h
;	COMDAT ??1FuzzyTerm@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1FuzzyTerm@@UAE@XZ PROC				; FuzzyTerm::~FuzzyTerm, COMDAT
; _this$ = ecx

; 17   :   virtual ~FuzzyTerm(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FuzzyTerm@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1FuzzyTerm@@UAE@XZ ENDP				; FuzzyTerm::~FuzzyTerm
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Orphan_me_locked@_Iterator_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
?_Orphan_me_locked@_Iterator_base12@std@@AAEXXZ PROC	; std::_Iterator_base12::_Orphan_me_locked, COMDAT
; _this$ = ecx

; 1212 :     void _Orphan_me_locked() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1213 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1214 :         _Orphan_me_unlocked();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_unlocked@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked

; 1215 :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Orphan_me_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Orphan_me_:
	DD	1
	DD	$LN4@Orphan_me_
$LN4@Orphan_me_:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Orphan_me_
$LN3@Orphan_me_:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_me_locked@_Iterator_base12@std@@AAEXXZ ENDP	; std::_Iterator_base12::_Orphan_me_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Orphan_me_unlocked@_Iterator_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Temp$1 = -12						; size = 4
__Pnext$ = -8						; size = 4
_this$ = -4						; size = 4
?_Orphan_me_unlocked@_Iterator_base12@std@@AAEXXZ PROC	; std::_Iterator_base12::_Orphan_me_unlocked, COMDAT
; _this$ = ecx

; 1200 :     _CONSTEXPR20_CONTAINER void _Orphan_me_unlocked() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1201 :         _Iterator_base12** _Pnext = &_Myproxy->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx
$LN2@Orphan_me_:

; 1202 :         while (*_Pnext && *_Pnext != this) {

	mov	edx, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN6@Orphan_me_
	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN6@Orphan_me_

; 1203 :             const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Temp$1[ebp], eax

; 1204 :             _Pnext           = &_Temp->_Mynextiter;

	mov	ecx, DWORD PTR __Temp$1[ebp]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx

; 1205 :         }

	jmp	SHORT $LN2@Orphan_me_
$LN6@Orphan_me_:

; 1206 : 
; 1207 :         _STL_VERIFY(*_Pnext, "ITERATOR LIST CORRUPTED!");

	mov	edx, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN9@Orphan_me_
	jmp	SHORT $LN4@Orphan_me_
$LN9@Orphan_me_:
	push	OFFSET ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1207					; 000004b7H
	push	OFFSET ??_C@_0GI@MNEMJBML@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN13@Orphan_me_
	int	3
$LN13@Orphan_me_:
	push	0
	push	1207					; 000004b7H
	push	OFFSET ??_C@_1NA@MJBOBEJL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1FG@EMKODCE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@
	push	OFFSET ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN9@Orphan_me_
$LN4@Orphan_me_:
	xor	edx, edx
	jne	SHORT $LN6@Orphan_me_

; 1208 :         *_Pnext  = _Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1209 :         _Myproxy = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1210 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_me_unlocked@_Iterator_base12@std@@AAEXXZ ENDP	; std::_Iterator_base12::_Orphan_me_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Adopt_locked@_Iterator_base12@std@@AAEXPAU_Container_proxy@2@@Z
_TEXT	SEGMENT
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
__Parent_proxy$ = 8					; size = 4
?_Adopt_locked@_Iterator_base12@std@@AAEXPAU_Container_proxy@2@@Z PROC ; std::_Iterator_base12::_Adopt_locked, COMDAT
; _this$ = ecx

; 1195 :     void _Adopt_locked(_Container_proxy* _Parent_proxy) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1196 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1197 :         _Adopt_unlocked(_Parent_proxy);

	mov	eax, DWORD PTR __Parent_proxy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt_unlocked@_Iterator_base12@std@@AAEXPAU_Container_proxy@2@@Z ; std::_Iterator_base12::_Adopt_unlocked

; 1198 :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Adopt_lock
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN5@Adopt_lock:
	DD	1
	DD	$LN4@Adopt_lock
$LN4@Adopt_lock:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Adopt_lock
$LN3@Adopt_lock:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Adopt_locked@_Iterator_base12@std@@AAEXPAU_Container_proxy@2@@Z ENDP ; std::_Iterator_base12::_Adopt_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Adopt_unlocked@_Iterator_base12@std@@AAEXPAU_Container_proxy@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parent_proxy$ = 8					; size = 4
?_Adopt_unlocked@_Iterator_base12@std@@AAEXPAU_Container_proxy@2@@Z PROC ; std::_Iterator_base12::_Adopt_unlocked, COMDAT
; _this$ = ecx

; 1186 :     _CONSTEXPR20_CONTAINER void _Adopt_unlocked(_Container_proxy* _Parent_proxy) noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1187 :         if (_Myproxy) { // adopted, remove self from list

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Adopt_unlo

; 1188 :             _Orphan_me_unlocked();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_unlocked@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked
$LN2@Adopt_unlo:

; 1189 :         }
; 1190 :         _Mynextiter                 = _Parent_proxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Parent_proxy$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 1191 :         _Parent_proxy->_Myfirstiter = this;

	mov	ecx, DWORD PTR __Parent_proxy$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 1192 :         _Myproxy                    = _Parent_proxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent_proxy$[ebp]
	mov	DWORD PTR [eax], ecx

; 1193 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Adopt_unlocked@_Iterator_base12@std@@AAEXPAU_Container_proxy@2@@Z ENDP ; std::_Iterator_base12::_Adopt_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 1175 :     _CONSTEXPR20_CONTAINER const _Container_base12* _Getcont() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1176 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@Getcont
$LN3@Getcont:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Getcont:
	mov	eax, DWORD PTR tv68[ebp]

; 1177 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Orphan_me_v2@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_me_v2@_Iterator_base12@std@@QAEXXZ PROC	; std::_Iterator_base12::_Orphan_me_v2, COMDAT
; _this$ = ecx

; 1152 :     _CONSTEXPR20_CONTAINER void _Orphan_me_v2() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1153 :         if (_Myproxy) { // adopted, remove self from list

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Orphan_me_

; 1154 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1155 :             if (_STD is_constant_evaluated()) {
; 1156 :                 _Orphan_me_unlocked();
; 1157 :             } else
; 1158 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1159 :             {
; 1160 :                 _Orphan_me_locked();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_locked@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_locked
$LN3@Orphan_me_:

; 1161 :             }
; 1162 :         }
; 1163 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_me_v2@_Iterator_base12@std@@QAEXXZ ENDP	; std::_Iterator_base12::_Orphan_me_v2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Parent_proxy$1 = -8					; size = 4
_this$ = -4						; size = 4
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 1134 :     _CONSTEXPR20_CONTAINER void _Adopt(const _Container_base12* _Parent) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1135 :         if (_Parent) { // have a parent, do adoption

	cmp	DWORD PTR __Parent$[ebp], 0
	je	SHORT $LN2@Adopt

; 1136 :             _Container_proxy* _Parent_proxy = _Parent->_Myproxy;

	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Parent_proxy$1[ebp], ecx

; 1137 :             if (_Myproxy != _Parent_proxy) { // change parentage

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Parent_proxy$1[ebp]
	je	SHORT $LN4@Adopt

; 1138 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1139 :                 if (_STD is_constant_evaluated()) {
; 1140 :                     _Adopt_unlocked(_Parent_proxy);
; 1141 :                 } else
; 1142 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1143 :                 {
; 1144 :                     _Adopt_locked(_Parent_proxy);

	mov	ecx, DWORD PTR __Parent_proxy$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt_locked@_Iterator_base12@std@@AAEXPAU_Container_proxy@2@@Z ; std::_Iterator_base12::_Adopt_locked
$LN4@Adopt:

; 1145 :                 }
; 1146 :             }
; 1147 :         } else { // no future parent, just disown current parent

	jmp	SHORT $LN5@Adopt
$LN2@Adopt:

; 1148 :             _Orphan_me_v2();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_v2@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me_v2
$LN5@Adopt:

; 1149 :         }
; 1150 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 1130 :     _CONSTEXPR20_CONTAINER ~_Iterator_base12() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1131 :         _Orphan_me_v2();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_v2@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me_v2

; 1132 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx

; 1114 :     _CONSTEXPR20_CONTAINER _Iterator_base12& operator=(const _Iterator_base12& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1115 :         if (_Myproxy != _Right._Myproxy) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN2@operator

; 1116 :             if (_Right._Myproxy) {

	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator

; 1117 :                 _Adopt(_Right._Myproxy->_Mycont);

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 1118 :             } else { // becoming invalid, disown current parent

	jmp	SHORT $LN2@operator
$LN3@operator:

; 1119 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1120 :                 _Orphan_me_v2();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_v2@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me_v2
$LN2@operator:

; 1121 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1122 :                 _Myproxy = nullptr;
; 1123 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1124 :             }
; 1125 :         }
; 1126 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1127 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 1108 :     _CONSTEXPR20_CONTAINER _Iterator_base12() noexcept = default; // construct orphaned iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1109 : 
; 1110 :     _CONSTEXPR20_CONTAINER _Iterator_base12(const _Iterator_base12& _Right) noexcept {
; 1111 :         *this = _Right;
; 1112 :     }
; 1113 : 
; 1114 :     _CONSTEXPR20_CONTAINER _Iterator_base12& operator=(const _Iterator_base12& _Right) noexcept {
; 1115 :         if (_Myproxy != _Right._Myproxy) {
; 1116 :             if (_Right._Myproxy) {
; 1117 :                 _Adopt(_Right._Myproxy->_Mycont);
; 1118 :             } else { // becoming invalid, disown current parent
; 1119 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1120 :                 _Orphan_me_v2();
; 1121 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1122 :                 _Myproxy = nullptr;
; 1123 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1124 :             }
; 1125 :         }
; 1126 :         return *this;
; 1127 :     }
; 1128 : 
; 1129 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1130 :     _CONSTEXPR20_CONTAINER ~_Iterator_base12() noexcept {
; 1131 :         _Orphan_me_v2();
; 1132 :     }
; 1133 : 
; 1134 :     _CONSTEXPR20_CONTAINER void _Adopt(const _Container_base12* _Parent) noexcept {
; 1135 :         if (_Parent) { // have a parent, do adoption
; 1136 :             _Container_proxy* _Parent_proxy = _Parent->_Myproxy;
; 1137 :             if (_Myproxy != _Parent_proxy) { // change parentage
; 1138 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1139 :                 if (_STD is_constant_evaluated()) {
; 1140 :                     _Adopt_unlocked(_Parent_proxy);
; 1141 :                 } else
; 1142 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1143 :                 {
; 1144 :                     _Adopt_locked(_Parent_proxy);
; 1145 :                 }
; 1146 :             }
; 1147 :         } else { // no future parent, just disown current parent
; 1148 :             _Orphan_me_v2();
; 1149 :         }
; 1150 :     }
; 1151 : 
; 1152 :     _CONSTEXPR20_CONTAINER void _Orphan_me_v2() noexcept {
; 1153 :         if (_Myproxy) { // adopted, remove self from list
; 1154 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1155 :             if (_STD is_constant_evaluated()) {
; 1156 :                 _Orphan_me_unlocked();
; 1157 :             } else
; 1158 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1159 :             {
; 1160 :                 _Orphan_me_locked();
; 1161 :             }
; 1162 :         }
; 1163 :     }
; 1164 : 
; 1165 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ / vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1166 :     _CONSTEXPR20_CONTAINER void _Adopt(const _Container_base12* _Parent) noexcept {
; 1167 :         if (_Parent) { // have a parent, do adoption
; 1168 :             _Myproxy = _Parent->_Myproxy;
; 1169 :         } else { // no future parent, just disown current parent
; 1170 :             _Myproxy = nullptr;
; 1171 :         }
; 1172 :     }
; 1173 : #endif // _ITERATOR_DEBUG_LEVEL != 2
; 1174 : 
; 1175 :     _CONSTEXPR20_CONTAINER const _Container_base12* _Getcont() const noexcept {
; 1176 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;
; 1177 :     }
; 1178 : 
; 1179 :     static constexpr bool _Unwrap_when_unverified = _ITERATOR_DEBUG_LEVEL == 0;
; 1180 : 
; 1181 :     mutable _Container_proxy* _Myproxy    = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1182 :     mutable _Iterator_base12* _Mynextiter = nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 1108 :     _CONSTEXPR20_CONTAINER _Iterator_base12() noexcept = default; // construct orphaned iterator

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Orphan_all_locked@_Container_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
?_Orphan_all_locked@_Container_base12@std@@AAEXXZ PROC	; std::_Container_base12::_Orphan_all_locked, COMDAT
; _this$ = ecx

; 1095 :     void _Orphan_all_locked() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1096 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1097 :         _Orphan_all_unlocked();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all_unlocked@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_unlocked

; 1098 :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Orphan_all
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Orphan_all:
	DD	1
	DD	$LN4@Orphan_all
$LN4@Orphan_all:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Orphan_all
$LN3@Orphan_all:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_all_locked@_Container_base12@std@@AAEXXZ ENDP	; std::_Container_base12::_Orphan_all_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Orphan_all_unlocked@_Container_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Pnext$1 = -8						; size = 4
_this$ = -4						; size = 4
?_Orphan_all_unlocked@_Container_base12@std@@AAEXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked, COMDAT
; _this$ = ecx

; 1220 : _CONSTEXPR20_CONTAINER void _Container_base12::_Orphan_all_unlocked() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1221 :     for (auto& _Pnext = _Myproxy->_Myfirstiter; _Pnext; _Pnext = _Pnext->_Mynextiter) { // TRANSITION, VSO-1269037

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$1[ebp], ecx
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:
	mov	edx, DWORD PTR __Pnext$1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Pnext$1[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], edx
$LN4@Orphan_all:
	mov	eax, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Orphan_all

; 1222 :         _Pnext->_Myproxy = nullptr;

	mov	ecx, DWORD PTR __Pnext$1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx], 0

; 1223 :     }

	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1224 :     _Myproxy->_Myfirstiter = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], 0

; 1225 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all_unlocked@_Container_base12@std@@AAEXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 1227 : _CONSTEXPR20_CONTAINER void _Container_base12::_Orphan_all() noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1228 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1229 :     if (_Myproxy) { // proxy allocated, drain it

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Orphan_all

; 1230 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1231 :         if (_STD is_constant_evaluated()) {
; 1232 :             _Orphan_all_unlocked();
; 1233 :         } else
; 1234 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1235 :         {
; 1236 :             _Orphan_all_locked();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all_locked@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_locked
$LN3@Orphan_all:

; 1237 :         }
; 1238 :     }
; 1239 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1240 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 1064 :     _CONSTEXPR20_CONTAINER _Container_base12() noexcept = default;

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1065 : 
; 1066 :     _Container_base12(const _Container_base12&) = delete;
; 1067 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1068 : 
; 1069 :     _CONSTEXPR20_CONTAINER void _Orphan_all() noexcept;
; 1070 :     _CONSTEXPR20_CONTAINER void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1071 : 
; 1072 :     template <class _Alloc>
; 1073 :     _CONSTEXPR20_CONTAINER void _Alloc_proxy(_Alloc&& _Al) {
; 1074 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1075 :         _Construct_in_place(*_New_proxy, this);
; 1076 :         _Myproxy            = _New_proxy;
; 1077 :         _New_proxy->_Mycont = this;
; 1078 :     }
; 1079 : 
; 1080 :     template <class _Alloc>
; 1081 :     _CONSTEXPR20_CONTAINER void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1082 :         // pre: no iterators refer to the existing proxy
; 1083 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1084 :         _Construct_in_place(*_New_proxy, this);
; 1085 :         _New_proxy->_Mycont = this;
; 1086 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1087 :     }
; 1088 : 
; 1089 :     _Container_proxy* _Myproxy = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1064 :     _CONSTEXPR20_CONTAINER _Container_base12() noexcept = default;

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Mycont_$ = 8						; size = 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 1056 :     _CONSTEXPR20_CONTAINER _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Mycont_$[ebp]
	mov	DWORD PTR [eax], ecx

; 1057 : 
; 1058 :     const _Container_base12* _Mycont       = nullptr;
; 1059 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0

; 1056 :     _CONSTEXPR20_CONTAINER _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -16					; size = 4
__Min_back_shift$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Ptr_user$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 153  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 154  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 155  :     _Bytes += _Non_user_size;

	mov	eax, DWORD PTR __Bytes$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 39					; 00000027H
	mov	edx, DWORD PTR __Bytes$[ebp]
	mov	DWORD PTR [edx], ecx

; 156  : 
; 157  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Ptr_user$[ebp], ecx

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	edx, 4
	imul	eax, edx, -1
	mov	ecx, DWORD PTR __Ptr_user$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR __Ptr_container$[ebp], edx
$LN4@Adjust_man:

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR __Ptr_user$[ebp]
	cmp	DWORD PTR [edx+ecx], -84215046		; fafafafaH
	jne	SHORT $LN7@Adjust_man
	jmp	SHORT $LN2@Adjust_man
$LN7@Adjust_man:
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	162					; 000000a2H
	push	OFFSET ??_C@_0GI@MNEMJBML@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@Adjust_man
	int	3
$LN19@Adjust_man:
	push	0
	push	162					; 000000a2H
	push	OFFSET ??_C@_1NA@MJBOBEJL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Adjust_man
$LN2@Adjust_man:
	xor	edx, edx
	jne	SHORT $LN4@Adjust_man

; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

	mov	DWORD PTR __Min_back_shift$[ebp], 8

; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR __Back_shift$[ebp], ecx
$LN10@Adjust_man:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	cmp	DWORD PTR __Back_shift$[ebp], 8
	jb	SHORT $LN13@Adjust_man
	cmp	DWORD PTR __Back_shift$[ebp], 39	; 00000027H
	ja	SHORT $LN13@Adjust_man
	jmp	SHORT $LN8@Adjust_man
$LN13@Adjust_man:
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	172					; 000000acH
	push	OFFSET ??_C@_0GI@MNEMJBML@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@Adjust_man
	int	3
$LN20@Adjust_man:
	push	0
	push	172					; 000000acH
	push	OFFSET ??_C@_1NA@MJBOBEJL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	eax, eax
	jne	SHORT $LN13@Adjust_man
$LN8@Adjust_man:
	xor	ecx, ecx
	jne	SHORT $LN10@Adjust_man

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [edx], eax

; 174  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 84   :         void* _Allocate(const size_t _Bytes) {

	push	ebp
	mov	ebp, esp

; 85   :         return ::operator new(_Bytes);

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 86   :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 321  :     _THROW(bad_array_new_length{});

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0bad_array_new_length@std@@QAE@XZ	; std::bad_array_new_length::bad_array_new_length
	push	OFFSET __TI3?AVbad_array_new_length@std@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Throw_bad_:

; 322  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_array_new_length@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0bad_alloc@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 140  :         : bad_alloc("bad array new length")

	push	OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0bad_alloc@std@@AAE@QBD@Z		; std::bad_alloc::bad_alloc

; 141  :     {

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AAE@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@AAE@QBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 130  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 129  :         : exception(_Message, 1)

	push	1
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@QBDH@Z		; std::exception::exception

; 130  :     {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 131  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@AAE@QBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 94   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@what
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv69[ebp], edx
	jmp	SHORT $LN4@what
$LN3@what:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
	mov	eax, DWORD PTR tv69[ebp]

; 96   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 89   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	___std_exception_destroy
	add	esp, 4

; 91   :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 71   :         : _Data()

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [edx+4], ecx

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Other$[ebp]
	add	ecx, 4
	push	ecx
	call	___std_exception_copy
	add	esp, 8

; 74   :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 66   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [edx+4], ecx

; 67   :         _Data._What = _Message;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Message$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 68   :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 167  :     {

	push	ebp
	mov	ebp, esp

; 168  :         (void)_Size;
; 169  :         return _Where;

	mov	eax, DWORD PTR __Where$[ebp]

; 170  :     }

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 556  :     _NODISCARD static constexpr int(max)() noexcept {

	push	ebp
	mov	ebp, esp

; 557  :         return INT_MAX;

	mov	eax, 2147483647				; 7fffffffH

; 558  :     }

	pop	ebp
	ret	0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File E:\Desktop\Raven\Raven1\Common\fuzzy\FuzzyOperators.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
